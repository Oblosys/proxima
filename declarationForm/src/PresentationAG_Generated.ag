----- GENERATED PART STARTS HERE. DO NOT EDIT ON OR BEYOND THIS LINE -----

--------------------------------------------------------------------------
-- presentationSheet                                                    --
--------------------------------------------------------------------------

WRAPPER Root

{
-- type PresentationSheet doc enr node clip token = 
--        enr -> doc -> FocusDoc -> WhitespaceMap -> IDPCounter -> 
--        (WhitespaceMap, IDPCounter, Presentation doc node clip token)

presentationSheet :: PresentationSheet Document EnrichedDoc Node ClipDoc UserToken
presentationSheet enrichedDoc document focusD whitespaceMap pIdC = 
  let (Syn_EnrichedDoc pIdC' pres self whitespaceMap') = 
        wrap_EnrichedDoc (sem_EnrichedDoc enrichedDoc) (Inh_EnrichedDoc document focusD pIdC [] whitespaceMap)
  in  (whitespaceMap', pIdC', pres)

{- 
A type error here means that extra attributes were declared on EnrichedDoc
The attribute signature for EnrichedDoc should be:

EnrichedDoc  [ focusD : FocusDoc path : Path
             | pIdC : Int layoutMap : WhitespaceMap
             | pres : Presentation_Doc_Node_Clip_Token EnrichedDoc 
             ]
-}
}



--------------------------------------------------------------------------
-- AG data type                                                         --
--------------------------------------------------------------------------

DATA EnrichedDoc
  | RootEnr form:Form
  | HoleEnrichedDoc
  | ParseErrEnrichedDoc error:{(ParseError Document Node ClipDoc UserToken)}

DATA Form
  | Form name:String faculty:String expenses:List_Expense currencies:List_Currency
  | HoleForm
  | ParseErrForm error:{(ParseError Document Node ClipDoc UserToken)}

DATA Expense
  | Expense description:String amount:Float currencyIx:Int
  | HoleExpense
  | ParseErrExpense error:{(ParseError Document Node ClipDoc UserToken)}

DATA Currency
  | Currency name:String euroRate:Float
  | HoleCurrency
  | ParseErrCurrency error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Expense
  | List_Expense elts:ConsList_Expense
  | HoleList_Expense
  | ParseErrList_Expense error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Currency
  | List_Currency elts:ConsList_Currency
  | HoleList_Currency
  | ParseErrList_Currency error:{(ParseError Document Node ClipDoc UserToken)}

DATA ConsList_Expense
  | Cons_Expense head:Expense tail:ConsList_Expense
  | Nil_Expense

DATA ConsList_Currency
  | Cons_Currency head:Currency tail:ConsList_Currency
  | Nil_Currency




--------------------------------------------------------------------------
-- Attr declarations                                                    --
--------------------------------------------------------------------------

ATTR EnrichedDoc Form Expense Currency List_Expense List_Currency ConsList_Expense ConsList_Currency
     [ doc : Document focusD : FocusDoc path : Path |  pIdC : Int whitespaceMap : WhitespaceMap | ]

ATTR EnrichedDoc Form Expense Currency List_Expense List_Currency
     [ | | pres : Presentation_Doc_Node_Clip_Token ]

ATTR Form Expense Currency List_Expense List_Currency ConsList_Expense ConsList_Currency
     [ ix : Int | | parseErrors USE {++} {[]} : {[ParseErrorMessage]} ]

ATTR Form Expense Currency List_Expense List_Currency
     [ | | ix : Int path : Path presXML : Presentation_Doc_Node_Clip_Token presTree : Presentation_Doc_Node_Clip_Token ]

ATTR List_Expense List_Currency ConsList_Expense ConsList_Currency
     [ | | press : {[Presentation_Doc_Node_Clip_Token]} ]

ATTR ConsList_Expense ConsList_Currency
     [ | | pressXML : {[Presentation_Doc_Node_Clip_Token]} pressTree : {[Presentation_Doc_Node_Clip_Token]} ]




--------------------------------------------------------------------------
-- General sem functions                                                --
--------------------------------------------------------------------------

SEM EnrichedDoc
  | RootEnr 
      form.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @form.pIdC
      form.path  = @lhs.path++[0]
  | RootEnr
    form.ix = 0
  | RootEnr
      lhs.pres = loc (Node_RootEnr @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | HoleEnrichedDoc
      lhs.pres = presHole @lhs.focusD "EnrichedDoc" (Node_HoleEnrichedDoc @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrEnrichedDoc
      lhs.pres = presParseErr (Node_ParseErrEnrichedDoc @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc

SEM Form
  | Form 
      expenses.pIdC = @lhs.pIdC + 0
      currencies.pIdC = @expenses.pIdC
      lhs.pIdC = @currencies.pIdC
      expenses.path  = @lhs.path++[2]
      currencies.path  = @lhs.path++[3]
  | Form
    expenses.ix = 2
    currencies.ix = 3
  | Form
      lhs.pres = loc (Node_Form @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | HoleForm
      lhs.pres = presHole @lhs.focusD "Form" (Node_HoleForm @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrForm
      lhs.pres = presParseErr (Node_ParseErrForm @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
      lhs.parseErrors = getErrorMessages @error

SEM Expense
  | Expense 
      lhs.pIdC = @lhs.pIdC + 0
  | Expense
  | Expense
      lhs.pres = loc (Node_Expense @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | HoleExpense
      lhs.pres = presHole @lhs.focusD "Expense" (Node_HoleExpense @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrExpense
      lhs.pres = presParseErr (Node_ParseErrExpense @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
      lhs.parseErrors = getErrorMessages @error

SEM Currency
  | Currency 
      lhs.pIdC = @lhs.pIdC + 0
  | Currency
  | Currency
      lhs.pres = loc (Node_Currency @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | HoleCurrency
      lhs.pres = presHole @lhs.focusD "Currency" (Node_HoleCurrency @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrCurrency
      lhs.pres = presParseErr (Node_ParseErrCurrency @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
      lhs.parseErrors = getErrorMessages @error

SEM List_Expense
  | List_Expense
      lhs.press = map ( loc (Node_List_Expense @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Expense     lhs.press = []
  | ParseErrList_Expense lhs.press = []
  | List_Expense
      lhs.pres = loc (Node_List_Expense @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path $ @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrList_Expense
      lhs.pres = presParseErr (Node_ParseErrList_Expense @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
      lhs.parseErrors = getErrorMessages @error
  | HoleList_Expense
      lhs.pres = presHole @lhs.focusD "Expense" (Node_HoleList_Expense @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc

SEM List_Currency
  | List_Currency
      lhs.press = map ( loc (Node_List_Currency @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Currency     lhs.press = []
  | ParseErrList_Currency lhs.press = []
  | List_Currency
      lhs.pres = loc (Node_List_Currency @self @lhs.path) $ presentFocus @lhs.focusD @lhs.path $ @pres
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
  | ParseErrList_Currency
      lhs.pres = presParseErr (Node_ParseErrList_Currency @self @lhs.path) @error
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc
      lhs.parseErrors = getErrorMessages @error
  | HoleList_Currency
      lhs.pres = presHole @lhs.focusD "Currency" (Node_HoleList_Currency @self @lhs.path) @lhs.path
                 `withLocalPopupMenuItems` menuD (PathD @lhs.path) @lhs.doc

SEM ConsList_Expense
  | Cons_Expense
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Expense      lhs.press = []

SEM ConsList_Currency
  | Cons_Currency
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Currency      lhs.press = []




--------------------------------------------------------------------------
-- Synthesized path rules                                               --
--------------------------------------------------------------------------

SEM Form
  | Form lhs.path = @lhs.path

SEM Expense
  | Expense lhs.path = @lhs.path

SEM Currency
  | Currency lhs.path = @lhs.path

SEM List_Expense
  | List_Expense lhs.path = @lhs.path

SEM List_Currency
  | List_Currency lhs.path = @lhs.path




--------------------------------------------------------------------------
-- Sem functions for XML presentation                                   --
--------------------------------------------------------------------------

SEM Form
  | Form
      lhs.presXML = presentElementXML @lhs.focusD (Node_Form @self @lhs.path) @lhs.path "Form" [ presentPrimXMLString @name, presentPrimXMLString @faculty, @expenses.presXML, @currencies.presXML ] 
  | HoleForm     lhs.presXML = presHole @lhs.focusD "Form" (Node_HoleForm @self @lhs.path) @lhs.path
  | ParseErrForm lhs.presXML = presParseErr (Node_ParseErrForm @self @lhs.path) @error

SEM Expense
  | Expense
      lhs.presXML = presentElementXML @lhs.focusD (Node_Expense @self @lhs.path) @lhs.path "Expense" [ presentPrimXMLString @description, presentPrimXMLFloat @amount, presentPrimXMLInt @currencyIx ] 
  | HoleExpense     lhs.presXML = presHole @lhs.focusD "Expense" (Node_HoleExpense @self @lhs.path) @lhs.path
  | ParseErrExpense lhs.presXML = presParseErr (Node_ParseErrExpense @self @lhs.path) @error

SEM Currency
  | Currency
      lhs.presXML = presentElementXML @lhs.focusD (Node_Currency @self @lhs.path) @lhs.path "Currency" [ presentPrimXMLString @name, presentPrimXMLFloat @euroRate ] 
  | HoleCurrency     lhs.presXML = presHole @lhs.focusD "Currency" (Node_HoleCurrency @self @lhs.path) @lhs.path
  | ParseErrCurrency lhs.presXML = presParseErr (Node_ParseErrCurrency @self @lhs.path) @error

SEM List_Expense
  | List_Expense
      lhs.presXML = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Expense
      lhs.presXML = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Expense @self @lhs.path) @error
  | HoleList_Expense
      lhs.presXML = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Expense" (Node_HoleList_Expense @self @lhs.path) @lhs.path

SEM List_Currency
  | List_Currency
      lhs.presXML = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Currency
      lhs.presXML = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Currency @self @lhs.path) @error
  | HoleList_Currency
      lhs.presXML = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Currency" (Node_HoleList_Currency @self @lhs.path) @lhs.path

SEM ConsList_Expense
  | Cons_Expense lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Expense  lhs.pressXML  = []

SEM ConsList_Currency
  | Cons_Currency lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Currency  lhs.pressXML  = []




--------------------------------------------------------------------------
-- Sem functions for tree presentation                                  --
--------------------------------------------------------------------------

SEM Form
  | Form
      lhs.presTree = presentElementTree @lhs.focusD (Node_Form @self @lhs.path) @lhs.path "Form" [ presentPrimXMLString @name, presentPrimXMLString @faculty, @expenses.presTree, @currencies.presTree ] 
  | HoleForm     lhs.presTree = presHole @lhs.focusD "Form" (Node_HoleForm @self @lhs.path) @lhs.path
  | ParseErrForm lhs.presTree = presParseErr (Node_ParseErrForm @self @lhs.path) @error

SEM Expense
  | Expense
      lhs.presTree = presentElementTree @lhs.focusD (Node_Expense @self @lhs.path) @lhs.path "Expense" [ presentPrimXMLString @description, presentPrimXMLFloat @amount, presentPrimXMLInt @currencyIx ] 
  | HoleExpense     lhs.presTree = presHole @lhs.focusD "Expense" (Node_HoleExpense @self @lhs.path) @lhs.path
  | ParseErrExpense lhs.presTree = presParseErr (Node_ParseErrExpense @self @lhs.path) @error

SEM Currency
  | Currency
      lhs.presTree = presentElementTree @lhs.focusD (Node_Currency @self @lhs.path) @lhs.path "Currency" [ presentPrimXMLString @name, presentPrimXMLFloat @euroRate ] 
  | HoleCurrency     lhs.presTree = presHole @lhs.focusD "Currency" (Node_HoleCurrency @self @lhs.path) @lhs.path
  | ParseErrCurrency lhs.presTree = presParseErr (Node_ParseErrCurrency @self @lhs.path) @error

SEM List_Expense
  | List_Expense
      lhs.presTree = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Expense
      lhs.presTree = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Expense @self @lhs.path) @error
  | HoleList_Expense
      lhs.presTree = loc (Node_List_Expense @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Expense" (Node_HoleList_Expense @self @lhs.path) @lhs.path

SEM List_Currency
  | List_Currency
      lhs.presTree = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Currency
      lhs.presTree = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Currency @self @lhs.path) @error
  | HoleList_Currency
      lhs.presTree = loc (Node_List_Currency @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Currency" (Node_HoleList_Currency @self @lhs.path) @lhs.path

SEM ConsList_Expense
  | Cons_Expense lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Expense  lhs.pressTree  = []

SEM ConsList_Currency
  | Cons_Currency lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Currency  lhs.pressTree  = []



