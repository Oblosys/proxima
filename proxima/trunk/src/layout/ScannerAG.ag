-----------------------------------------------------------------------------------------
{-| Module      : ScannerAG.ag
    Copyright   : (c) 2007 Martijn Schrage
    License     : All Rights Reserved

    Maintainer  : martijn@cs.uu.nl
    Stability   : experimental
    Portability : 
-}
-----------------------------------------------------------------------------------------
{
import CommonTypes
import PresTypes
import LayLayerTypes
import LayLayerUtils
import List
import Char
import qualified Data.Map as Map
}

DATA Layout
  | EmptyP      id : IDP
  | StringP     id : IDP text : String
  | ImageP      id : IDP src : String style : ImgStyle
  | PolyP       id : IDP pointList : {[ (Float, Float) ]} lineWidth : Int style : Style
  | RectangleP  id : IDP w, h : Int lineWidth : Int style : Style
  | EllipseP	id : IDP w, h : Int lineWidth : Int style : Style
  | RowP        id : IDP hRefNr : Int                       presentationList : LayoutList
  | ColP        id : IDP vRefNr : Int formatted : Formatted presentationList : LayoutList
  | OverlayP    id : IDP                                    presentationList : LayoutList
  | GraphP      id : IDP d : Dirty w,h : Int edges : {[(Int,Int)]} presentationList : LayoutList 
  | VertexP     id : IDP i,x,y: Int outline : Outline child : Layout
  | FormatterP  id : IDP presentationList : LayoutList
  | WithP       attrRule : AttrRule  child : Layout
  | StructuralP id : IDP child : Layout
  | ParsingP    id : IDP lexer : Lexer child : Layout
  | LocatorP location : {node} child : Layout
  | ArrangedP

TYPE LayoutList = [Layout]


ATTR Layout LayoutList 
  [ scanStructural : { () {- type sig is not used, the type is Scanner.tokenizeLay -} } | | ]
-- the we pass this function as an argument, since either it has to be defined in this module, which
-- is awkward during development, or a module cycle has to be resolved, complicating the build process

ATTR Layout LayoutList 
  [ lexer : Lexer | | ]

-- TODO: what about parsing nodes declaring different lexers? give a warning?

ATTR Layout LayoutList [ lloc : {Maybe node} | | ]

SEM Layout
  | LocatorP
      child.lloc = Just @location


ATTR Layout LayoutList [ | idPCounter : IDPCounter whitespaceMap : WhitespaceMap | ]

ATTR Layout [ | | scanChars : {[ScanChar]} ]

SEM Layout
  | StringP
      lhs.scanChars = map (Char @id) @text

  | RowP
      lhs.scanChars = concat @presentationList.scanCharss
  | ColP
      lhs.scanChars = concat $ intersperse [Char NoIDP '\n'] @presentationList.scanCharss
  | OverlayP
      lhs.scanChars = head @presentationList.scanCharss
  | FormatterP -- maybe add a '\n'?
      lhs.scanChars = concat $ intersperse [Char NoIDP ' '] @presentationList.scanCharss
  | WithP
      lhs.scanChars = @child.scanChars
  | ParsingP
      lhs.scanChars = @child.scanChars
  | LocatorP
      lhs.scanChars = @child.scanChars
  | StructuralP
      (lhs.scanChars, lhs.idPCounter, lhs.whitespaceMap) = 
        let (pres, idPCounter, whitespaceMap) = 
              @lhs.scanStructural @lhs.lexer @lhs.lloc @lhs.idPCounter @lhs.whitespaceMap @child.self
        in  ([Structural @id @lhs.lloc pres @self], idPCounter, whitespaceMap)
  | EmptyP 
      lhs.scanChars = []
  | ImageP PolyP RectangleP EllipseP VertexP GraphP
      lhs.scanChars = [] -- for now, we assume these will only appear in structural presentations
  | ArrangedP 
      lhs.scanChars = [] -- will not occur
      
ATTR LayoutList [ | | scanCharss : {[[ScanChar]]} ]

SEM LayoutList
  | Nil
      lhs.scanCharss = []
  | Cons
      lhs.scanCharss = @hd.scanChars : @tl.scanCharss
      