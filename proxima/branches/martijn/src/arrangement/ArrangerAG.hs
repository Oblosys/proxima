-- do not edit; automatically generated by UU.AG
module ArrangerAG where

import IOExts

import CommonTypes
import ArrLayerTypes
import ArrLayerUtils

import DocTypes -- for Node
import FontLib

-- Uedit, transforming AG to new syntax: Find   ^([a-z][a-z,A-Z]++^)_     Replace  @^1.


{- for AlternativeP
selectFirstFit :: Int -> [ Int ] -> Int       
selectFirstFit availableWidth widths = 
  if null widths 
  then error "Alternative presentation has no alternatives"
  else select widths 0
 where
  select [_] n = n
  select (w:ws) n = if w <= availableWidth then n else select ws (n+1)

-- maybe nicer as synth attribute for presentationList

-}


{- for MatrixP
divide n [] = []
divide n xs = let (line, rest) = splitAt n xs in line : divide n rest

getRows n [] = []
getRows n xs = let (line, rest) = splitAt n xs in line : divide n rest

getCols n xs = foldr (zipWith (:)) (repeat []) (getRows n xs)
-}



{- for FormatterP
unfoldAGFormatter w ws presentations = 
 let breaks = firstFit w ws
     dividedPresentations = linesFromBreaks breaks presentations
     rows = -- map (\lst -> LayedOutRowP lst 100 32 (repeat (0,0))) presentationLists
         map (RowP NoID 0) dividedPresentations
     unfoldedList = ColP NoID 0 (rows)
 in  --debug Arr ("formatter has width:"++show w++"\nkids have widths "++show ws) 
           unfoldedList



-- just add words until line overflow
firstFit lineWidth widths = buildFFBreaks lineWidth 0 0 widths

buildFFBreaks _ pos _ [] = [] -- add a breakpoint after last word? prob. not, otherwise return [pos]
buildFFBreaks maxLength pos currentLength (width:widths) =
  let space = if currentLength == 0 then 0 else 0 -- hard coded minimum space, and widths must be >= 0 
      newLength = currentLength + space + width
  in if currentLength == 0 && width > maxLength
     then if null widths 
          then []
          else (pos+1) : buildFFBreaks maxLength pos 0 (widths)
     else if newLength <= maxLength
          then buildFFBreaks maxLength (pos+1) newLength widths
          else pos : buildFFBreaks maxLength (pos) 0 (width:widths)

linesFromBreaks :: [Int] -> [a] -> [[a]]
linesFromBreaks brks wrds = tolines' brks 0 wrds 
   where
   tolines' [] _ wrds = [wrds]
   tolines' (brk:brks) lastbrk wrds = take (brk-lastbrk) wrds :
                                      tolines' brks brk (drop (brk-lastbrk) wrds)

-}


assign [] _ _ = []
assign (str:strs) (a:as) (o:os) = (if str then a else o) : assign strs as os


data Root = Root Presentation

type PresentationList = [Presentation]
                      
-- We don't want AG to generate the Presentation data types, so data type generation is turned off.
-- However, we do need Root and PresentationList
-- Presentation ------------------------------------------------
{-
   inherited attributes:
      assignedHRef         : Int
      assignedHeight       : Int
      assignedVRef         : Int
      assignedWidth        : Int
      backgroundColor      : Color
      fillColor            : Color
      font                 : Font
      fontMetrics          : FontMetrics
      lineColor            : Color
      mouseDown            : Maybe UpdateDoc
      oldArr               : Arrangement
      popupMenuItems       : [ PopupMenuItem ]
      textColor            : Color
      x                    : Int
      y                    : Int

   chained attributes:
      allFonts             : [Font]

   synthesised attributes:
      arrangement          : Arrangement
      finalHRef            : Int
      finalHeight          : Int
      finalVRef            : Int
      finalWidth           : Int
      hRf                  : Int
      hStretch             : Bool
      maxFormatterDepth    : Int
      minHeight            : Int
      minWidth             : Int
      unfoldedTree         : Presentation
      vRf                  : Int
      vStretch             : Bool

-}
{-
   local variables for Presentation.ArrangedP:
      maxFormatterDepth
      unfoldedTree
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.ColP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      bottomChildSpace
      topChildSpace
      bottomVStretches
      topVStretches
      bottomTotalSpace
      topTotalSpace
      bottomCorrection
      topCorrection
      stretchMinHeights
      assignedHeights
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth
      minRightWidth
      minLeftWidth

-}
{-
   local variables for Presentation.EmptyP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.ImageP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.LocatorP:

-}
{-
   local variables for Presentation.OverlayP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minBottomHeight
      minTopHeight
      minWidth
      minRightWidth
      minLeftWidth

-}
{-
   local variables for Presentation.ParsingP:

-}
{-
   local variables for Presentation.PolyP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.RectangleP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.RowP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      rightChildSpace
      leftChildSpace
      rightHStretches
      leftHStretches
      rightTotalSpace
      leftTotalSpace
      rightCorrection
      leftCorrection
      stretchMinWidths
      assignedWidths
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth
      minBottomHeight
      minTopHeight

-}
{-
   local variables for Presentation.StringP:
      finalVRef
      finalHRef
      finalHeight
      finalWidth
      vRf
      hRf
      vStretch
      hStretch
      minHeight
      minWidth

-}
{-
   local variables for Presentation.StructuralP:

-}
{-
   local variables for Presentation.WithP:
      newInh
      newSyn
      newAttrs

-}
-- semantic domain
type T_Presentation = ([Font]) ->
                      (Int) ->
                      (Int) ->
                      (Int) ->
                      (Int) ->
                      (Color) ->
                      (Color) ->
                      (Font) ->
                      (FontMetrics) ->
                      (Color) ->
                      (Maybe UpdateDoc) ->
                      (Arrangement) ->
                      ([ PopupMenuItem ]) ->
                      (Color) ->
                      (Int) ->
                      (Int) ->
                      ( ([Font]),(Arrangement),(Int),(Int),(Int),(Int),(Int),(Bool),(Int),(Int),(Int),(Presentation),(Int),(Bool))
-- cata
sem_Presentation :: (Presentation) ->
                    (T_Presentation)
sem_Presentation ((ArrangedP )) =
    (sem_Presentation_ArrangedP )
sem_Presentation ((ColP (_id) (_hRefNr) (_presentationList))) =
    (sem_Presentation_ColP (_id) (_hRefNr) ((sem_PresentationList (_presentationList))))
sem_Presentation ((EmptyP (_id))) =
    (sem_Presentation_EmptyP (_id))
sem_Presentation ((ImageP (_id) (_src))) =
    (sem_Presentation_ImageP (_id) (_src))
sem_Presentation ((LocatorP (_location) (_child))) =
    (sem_Presentation_LocatorP (_location) ((sem_Presentation (_child))))
sem_Presentation ((OverlayP (_id) (_presentationList))) =
    (sem_Presentation_OverlayP (_id) ((sem_PresentationList (_presentationList))))
sem_Presentation ((ParsingP (_id) (_child))) =
    (sem_Presentation_ParsingP (_id) ((sem_Presentation (_child))))
sem_Presentation ((PolyP (_id) (_pointList) (_lineWidth))) =
    (sem_Presentation_PolyP (_id) (_pointList) (_lineWidth))
sem_Presentation ((RectangleP (_id) (_w) (_h) (_lineWidth))) =
    (sem_Presentation_RectangleP (_id) (_w) (_h) (_lineWidth))
sem_Presentation ((RowP (_id) (_vRefNr) (_presentationList))) =
    (sem_Presentation_RowP (_id) (_vRefNr) ((sem_PresentationList (_presentationList))))
sem_Presentation ((StringP (_id) (_text))) =
    (sem_Presentation_StringP (_id) (_text))
sem_Presentation ((StructuralP (_id) (_child))) =
    (sem_Presentation_StructuralP (_id) ((sem_Presentation (_child))))
sem_Presentation ((WithP (_attrRule) (_child))) =
    (sem_Presentation_WithP (_attrRule) ((sem_Presentation (_child))))
sem_Presentation_ArrangedP :: (T_Presentation)
sem_Presentation_ArrangedP (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            _finalWidth
        (_minHeight) =
            _finalHeight
        (_hStretch) =
            False
        (_vStretch) =
            False
        (_hRf) =
            hRefA _lhs_oldArr
        (_vRf) =
            vRefA _lhs_oldArr
        (_finalWidth) =
            widthA _lhs_oldArr
        (_finalHeight) =
            heightA _lhs_oldArr
        (_finalHRef) =
            hRefA _lhs_oldArr
        (_finalVRef) =
            vRefA _lhs_oldArr
        (_unfoldedTree) =
            ArrangedP
        (_maxFormatterDepth) =
            0
    in  ( _lhs_allFonts,setXYWHA _lhs_x _lhs_y _finalWidth _finalHeight _lhs_oldArr,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,_maxFormatterDepth,_minHeight,_minWidth,_unfoldedTree,_vRf,_vStretch)
sem_Presentation_ColP :: (IDP) ->
                         (Int) ->
                         (T_PresentationList) ->
                         (T_Presentation)
sem_Presentation_ColP (_id) (_hRefNr) (_presentationList) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minLeftWidth) =
            if null _presentationList_vRfList then 0
            else maximum _presentationList_vRfList
        (_minRightWidth) =
            if null _presentationList_vRfList then 0
            else maximum [ minWidth - vRf | (minWidth, vRf) <- zip _presentationList_minWidthList _presentationList_vRfList ]
        (_minWidth) =
            _minLeftWidth + _minRightWidth
        (_minHeight) =
            sum _presentationList_minHeightList
        (_hStretch) =
            and _presentationList_hStretchList
        (_vStretch) =
            or _presentationList_vStretchList
        (_hRf) =
            if null _presentationList_hRfList then 0
            else sum (take _hRefNr _presentationList_minHeightList) + _presentationList_hRfList !! _hRefNr
        (_vRf) =
            _minLeftWidth
        (_assignedHeights) =
            if _presentationList_vStretchList!! _hRefNr
            then assign _presentationList_vStretchList
                               (repeat((_topTotalSpace+ _bottomTotalSpace)`div`(_topVStretches+1+ _bottomVStretches))
                               )
                               _presentationList_minHeightList
            else assign _presentationList_vStretchList
                               (  replicate _hRefNr (_topChildSpace)
                               ++ [0]
                               ++ repeat _bottomChildSpace
                               )
                               _presentationList_minHeightList
        (_stretchMinHeights) =
            assign _presentationList_vStretchList _presentationList_minHeightList (repeat 0)
        (_topCorrection) =
            sum (take _hRefNr _stretchMinHeights)
                + if _presentationList_vStretchList!! _hRefNr then _stretchMinHeights !! _hRefNr else 0
        (_bottomCorrection) =
            sum (drop (_hRefNr+1) _stretchMinHeights)
        (_topTotalSpace) =
            _lhs_assignedHRef - _hRf  + _topCorrection
        (_bottomTotalSpace) =
            _lhs_assignedHeight - _minHeight - _topTotalSpace   + _bottomCorrection
        (_topVStretches) =
            length . filter (==True) . take _hRefNr $ _presentationList_vStretchList
        (_bottomVStretches) =
            length . filter (==True) . drop (_hRefNr+1) $ _presentationList_vStretchList
        (_topChildSpace) =
            round (fromIntegral _topTotalSpace / fromIntegral _topVStretches )
        (_bottomChildSpace) =
            round (fromIntegral _bottomTotalSpace / fromIntegral _bottomVStretches )
        (_finalWidth) =
            _lhs_assignedWidth
        (_finalHeight) =
            sum _presentationList_finalHeightList
        (_finalHRef) =
            if null _presentationList_hRfList then 0
            else if _presentationList_vStretchList!! _hRefNr then _lhs_assignedHRef
                    else sum (take _hRefNr _assignedHeights) + (_presentationList_hRfList !! _hRefNr)
        (_finalVRef) =
            _lhs_assignedVRef
        ( _presentationList_allFonts
         ,_presentationList_arrangementList
         ,_presentationList_finalHRefList
         ,_presentationList_finalHeightList
         ,_presentationList_finalVRefList
         ,_presentationList_finalWidthList
         ,_presentationList_hRfList
         ,_presentationList_hStretchList
         ,_presentationList_maxFormatterDepthList
         ,_presentationList_minHeightList
         ,_presentationList_minWidthList
         ,_presentationList_unfoldedTreeList
         ,_presentationList_vRfList
         ,_presentationList_vStretchList
         ) =
            (_presentationList (_lhs_allFonts)
                               (_presentationList_hRfList)
                               (_assignedHeights)
                               (assign _presentationList_hStretchList
                                (repeat _lhs_assignedVRef)
                                _presentationList_vRfList)
                               (assign _presentationList_hStretchList
                                (repeat _lhs_assignedWidth) _presentationList_minWidthList)
                               (_lhs_backgroundColor)
                               (_lhs_fillColor)
                               (_lhs_font)
                               (_lhs_fontMetrics)
                               (_lhs_lineColor)
                               (_lhs_mouseDown)
                               (case _lhs_oldArr of ColA _ _ _ _ _ _ _ _ arrs -> arrs
                                                    _                     -> repeat $ EmptyA NoIDA 0 0 0 0 0 0)
                               (_lhs_popupMenuItems)
                               (_lhs_textColor)
                               ([ _finalVRef - cvRf | cvRf <- _presentationList_finalVRefList ])
                               (init.scanl (+) 0 $ _presentationList_finalHeightList))
    in  ( _presentationList_allFonts,ColA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _lhs_backgroundColor _presentationList_arrangementList,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,maximum _presentationList_maxFormatterDepthList,_minHeight,_minWidth,ColP _id _hRefNr _presentationList_unfoldedTreeList,_vRf,_vStretch)
sem_Presentation_EmptyP :: (IDP) ->
                           (T_Presentation)
sem_Presentation_EmptyP (_id) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            0
        (_minHeight) =
            0
        (_hStretch) =
            False
        (_vStretch) =
            False
        (_hRf) =
            0
        (_vRf) =
            0
        (_finalWidth) =
            _lhs_assignedWidth
        (_finalHeight) =
            _lhs_assignedHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
    in  ( _lhs_allFonts,EmptyA (idAFromP _id) 0 0 0 0 0 0,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,0,_minHeight,_minWidth,EmptyP _id,_vRf,_vStretch)
sem_Presentation_ImageP :: (IDP) ->
                           (String) ->
                           (T_Presentation)
sem_Presentation_ImageP (_id) (_src) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            0
        (_minHeight) =
            0
        (_hStretch) =
            True
        (_vStretch) =
            True
        (_hRf) =
            0
        (_vRf) =
            0
        (_finalWidth) =
            _lhs_assignedWidth
        (_finalHeight) =
            _lhs_assignedHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
    in  ( _lhs_allFonts,ImageA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _src Tile _lhs_lineColor _lhs_backgroundColor,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,0,_minHeight,_minWidth,ImageP _id _src,_vRf,_vStretch)
sem_Presentation_LocatorP :: (Node) ->
                             (T_Presentation) ->
                             (T_Presentation)
sem_Presentation_LocatorP (_location) (_child) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let ( _child_allFonts,_child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,_child_unfoldedTree,_child_vRf,_child_vStretch) =
            (_child (_lhs_allFonts)
                    (_lhs_assignedHRef)
                    (_lhs_assignedHeight)
                    (_lhs_assignedVRef)
                    (_lhs_assignedWidth)
                    (_lhs_backgroundColor)
                    (_lhs_fillColor)
                    (_lhs_font)
                    (_lhs_fontMetrics)
                    (_lhs_lineColor)
                    (_lhs_mouseDown)
                    (case _lhs_oldArr of LocatorA _ arr -> arr
                                         _              -> debug Arr "" EmptyA NoIDA 0 0 0 0 0 0)
                    (_lhs_popupMenuItems)
                    (_lhs_textColor)
                    (_lhs_x)
                    (_lhs_y))
    in  ( _child_allFonts,LocatorA _location _child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,LocatorP _location _child_unfoldedTree,_child_vRf,_child_vStretch)
sem_Presentation_OverlayP :: (IDP) ->
                             (T_PresentationList) ->
                             (T_Presentation)
sem_Presentation_OverlayP (_id) (_presentationList) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minLeftWidth) =
            maximum _presentationList_vRfList
        (_minRightWidth) =
            maximum [ minWidth - vRf | (minWidth, vRf) <- zip _presentationList_minWidthList _presentationList_vRfList ]
        (_minWidth) =
            _minLeftWidth + _minRightWidth
        (_minTopHeight) =
            maximum _presentationList_hRfList
        (_minBottomHeight) =
            maximum [ minHeight - hRf | (minHeight, hRf) <- zip _presentationList_minHeightList _presentationList_hRfList ]
        (_minHeight) =
            _minTopHeight + _minBottomHeight
        (_hStretch) =
            and _presentationList_hStretchList
        (_vStretch) =
            and _presentationList_vStretchList
        (_hRf) =
            _minTopHeight
        (_vRf) =
            _minLeftWidth
        (_finalWidth) =
            _lhs_assignedWidth
        (_finalHeight) =
            _lhs_assignedHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
        ( _presentationList_allFonts
         ,_presentationList_arrangementList
         ,_presentationList_finalHRefList
         ,_presentationList_finalHeightList
         ,_presentationList_finalVRefList
         ,_presentationList_finalWidthList
         ,_presentationList_hRfList
         ,_presentationList_hStretchList
         ,_presentationList_maxFormatterDepthList
         ,_presentationList_minHeightList
         ,_presentationList_minWidthList
         ,_presentationList_unfoldedTreeList
         ,_presentationList_vRfList
         ,_presentationList_vStretchList
         ) =
            (_presentationList (_lhs_allFonts)
                               (assign _presentationList_vStretchList
                                (repeat _lhs_assignedHRef) _presentationList_hRfList)
                               (assign _presentationList_vStretchList
                                (repeat _lhs_assignedHeight) _presentationList_minHeightList)
                               (assign _presentationList_hStretchList
                                (repeat _lhs_assignedVRef) _presentationList_vRfList)
                               (assign _presentationList_hStretchList
                                (repeat _lhs_assignedWidth) _presentationList_minWidthList)
                               (_lhs_backgroundColor)
                               (_lhs_fillColor)
                               (_lhs_font)
                               (_lhs_fontMetrics)
                               (_lhs_lineColor)
                               (_lhs_mouseDown)
                               (case _lhs_oldArr of OverlayA _ _ _ _ _ _ _ _ arrs -> arrs
                                                    _                         -> repeat $ EmptyA NoIDA 0 0 0 0 0 0)
                               (_lhs_popupMenuItems)
                               (_lhs_textColor)
                               ([ _finalVRef - cvRf | cvRf <- _presentationList_finalVRefList ])
                               ([ _finalHRef - chRf | chRf <- _presentationList_finalHRefList ]))
    in  ( _presentationList_allFonts,OverlayA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _lhs_backgroundColor _presentationList_arrangementList,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,maximum _presentationList_maxFormatterDepthList,_minHeight,_minWidth,OverlayP _id _presentationList_unfoldedTreeList,_vRf,_vStretch)
sem_Presentation_ParsingP :: (IDP) ->
                             (T_Presentation) ->
                             (T_Presentation)
sem_Presentation_ParsingP (_id) (_child) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let ( _child_allFonts,_child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,_child_unfoldedTree,_child_vRf,_child_vStretch) =
            (_child (_lhs_allFonts)
                    (_lhs_assignedHRef)
                    (_lhs_assignedHeight)
                    (_lhs_assignedVRef)
                    (_lhs_assignedWidth)
                    (_lhs_backgroundColor)
                    (_lhs_fillColor)
                    (_lhs_font)
                    (_lhs_fontMetrics)
                    (_lhs_lineColor)
                    (_lhs_mouseDown)
                    (case _lhs_oldArr of ParsingA _ arr -> arr
                                         _              -> debug Arr "" EmptyA NoIDA 0 0 0 0 0 0)
                    (_lhs_popupMenuItems)
                    (_lhs_textColor)
                    (_lhs_x)
                    (_lhs_y))
    in  ( _child_allFonts,ParsingA (idAFromP _id) _child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,ParsingP _id  _child_unfoldedTree,_child_vRf,_child_vStretch)
sem_Presentation_PolyP :: (IDP) ->
                          ([ (Float, Float) ]) ->
                          (Int) ->
                          (T_Presentation)
sem_Presentation_PolyP (_id) (_pointList) (_lineWidth) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            0
        (_minHeight) =
            0
        (_hStretch) =
            True
        (_vStretch) =
            True
        (_hRf) =
            0
        (_vRf) =
            0
        (_finalWidth) =
            _lhs_assignedWidth
        (_finalHeight) =
            _lhs_assignedHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
    in  ( _lhs_allFonts
         ,let mkPoint (rx, ry) = ( round (rx * fromIntegral (_finalWidth-1))
                                             , round (ry * fromIntegral (_finalHeight-1)) )
          in  PolyA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef (map mkPoint _pointList) _lineWidth _lhs_lineColor _lhs_backgroundColor
         ,_finalHRef
         ,_finalHeight
         ,_finalVRef
         ,_finalWidth
         ,_hRf
         ,_hStretch
         ,0
         ,_minHeight
         ,_minWidth
         ,PolyP _id _pointList _lineWidth
         ,_vRf
         ,_vStretch
         )
sem_Presentation_RectangleP :: (IDP) ->
                               (Int) ->
                               (Int) ->
                               (Int) ->
                               (T_Presentation)
sem_Presentation_RectangleP (_id) (_w) (_h) (_lineWidth) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            _w
        (_minHeight) =
            _h
        (_hStretch) =
            False
        (_vStretch) =
            False
        (_hRf) =
            0
        (_vRf) =
            0
        (_finalWidth) =
            _minWidth
        (_finalHeight) =
            _minHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
    in  ( _lhs_allFonts,RectangleA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _lineWidth Solid _lhs_lineColor _lhs_fillColor,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,0,_minHeight,_minWidth,RectangleP _id _w _h _lineWidth,_vRf,_vStretch)
sem_Presentation_RowP :: (IDP) ->
                         (Int) ->
                         (T_PresentationList) ->
                         (T_Presentation)
sem_Presentation_RowP (_id) (_vRefNr) (_presentationList) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minTopHeight) =
            if null _presentationList_hRfList then 0
               else maximum _presentationList_hRfList
        (_minBottomHeight) =
            if null _presentationList_hRfList then 0
            else maximum [ minHeight - hRf | (minHeight, hRf) <- zip _presentationList_minHeightList _presentationList_hRfList ]
        (_minWidth) =
            sum _presentationList_minWidthList
        (_minHeight) =
            _minTopHeight + _minBottomHeight
        (_hStretch) =
            or _presentationList_hStretchList
        (_vStretch) =
            and _presentationList_vStretchList
        (_hRf) =
            _minTopHeight
        (_vRf) =
            if null _presentationList_vRfList then 0
            else sum (take _vRefNr _presentationList_minWidthList) + _presentationList_vRfList !! _vRefNr
        (_assignedWidths) =
            if _presentationList_hStretchList!! _vRefNr
                  then assign _presentationList_hStretchList
                                (repeat((_leftTotalSpace+ _rightTotalSpace)`div`(_leftHStretches+1+ _rightHStretches))
                                )
                                _presentationList_minWidthList
                  else assign _presentationList_hStretchList
                                (  replicate _vRefNr (_leftChildSpace)
                                ++ [0]
                                ++ repeat _rightChildSpace
                                )
                                _presentationList_minWidthList
        (_stretchMinWidths) =
            assign _presentationList_hStretchList _presentationList_minWidthList (repeat 0)
        (_leftCorrection) =
            sum (take _vRefNr _stretchMinWidths)
               + if _presentationList_hStretchList!! _vRefNr then _stretchMinWidths !! _vRefNr else 0
        (_rightCorrection) =
            sum (drop (_vRefNr+1) _stretchMinWidths)
        (_leftTotalSpace) =
            _lhs_assignedVRef - _vRf    + _leftCorrection
        (_rightTotalSpace) =
            _lhs_assignedWidth - _minWidth - _leftTotalSpace  + _rightCorrection
        (_leftHStretches) =
            length . filter (==True) . take _vRefNr $ _presentationList_hStretchList
        (_rightHStretches) =
            length . filter (==True) . drop (_vRefNr+1) $ _presentationList_hStretchList
        (_leftChildSpace) =
            round (fromIntegral _leftTotalSpace / fromIntegral _leftHStretches )
        (_rightChildSpace) =
            round (fromIntegral _rightTotalSpace / fromIntegral _rightHStretches )
        (_finalWidth) =
            sum _presentationList_finalWidthList
        (_finalHeight) =
            _lhs_assignedHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            if null _presentationList_vRfList then 0
            else if _presentationList_hStretchList!! _vRefNr then _lhs_assignedVRef
                    else sum (take _vRefNr _assignedWidths) + (_presentationList_vRfList !! _vRefNr)
        ( _presentationList_allFonts
         ,_presentationList_arrangementList
         ,_presentationList_finalHRefList
         ,_presentationList_finalHeightList
         ,_presentationList_finalVRefList
         ,_presentationList_finalWidthList
         ,_presentationList_hRfList
         ,_presentationList_hStretchList
         ,_presentationList_maxFormatterDepthList
         ,_presentationList_minHeightList
         ,_presentationList_minWidthList
         ,_presentationList_unfoldedTreeList
         ,_presentationList_vRfList
         ,_presentationList_vStretchList
         ) =
            (_presentationList (_lhs_allFonts)
                               (assign _presentationList_vStretchList
                                (repeat _hRf)
                                                     _presentationList_hRfList)
                               (assign _presentationList_vStretchList
                                (repeat _lhs_assignedHeight) _presentationList_minHeightList)
                               (_presentationList_vRfList)
                               (_assignedWidths)
                               (_lhs_backgroundColor)
                               (_lhs_fillColor)
                               (_lhs_font)
                               (_lhs_fontMetrics)
                               (_lhs_lineColor)
                               (_lhs_mouseDown)
                               (case _lhs_oldArr of RowA _ _ _ _ _ _ _ _ arrs -> arrs
                                                    _                     -> repeat $ EmptyA NoIDA 0 0 0 0 0 0)
                               (_lhs_popupMenuItems)
                               (_lhs_textColor)
                               (init.scanl (+) 0 $ _presentationList_finalWidthList)
                               ([ _finalHRef - chRf | chRf <- _presentationList_finalHRefList ]))
    in  ( _presentationList_allFonts,RowA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _lhs_backgroundColor _presentationList_arrangementList,_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,maximum _presentationList_maxFormatterDepthList,_minHeight,_minWidth,RowP _id _vRefNr _presentationList_unfoldedTreeList,_vRf,_vStretch)
sem_Presentation_StringP :: (IDP) ->
                            (String) ->
                            (T_Presentation)
sem_Presentation_StringP (_id) (_text) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_minWidth) =
            textWidth _lhs_fontMetrics _lhs_font _text
        (_minHeight) =
            charHeight _lhs_fontMetrics _lhs_font
        (_hStretch) =
            False
        (_vStretch) =
            False
        (_hRf) =
            baseLine _lhs_fontMetrics _lhs_font
        (_vRf) =
            0
        (_finalWidth) =
            _minWidth
        (_finalHeight) =
            _minHeight
        (_finalHRef) =
            _lhs_assignedHRef
        (_finalVRef) =
            _lhs_assignedVRef
    in  ( _lhs_allFonts,StringA (idAFromP _id) _lhs_x _lhs_y _finalWidth _finalHeight _finalHRef _finalVRef _text _lhs_textColor _lhs_font (cumulativeCharWidths _lhs_fontMetrics _lhs_font _text),_finalHRef,_finalHeight,_finalVRef,_finalWidth,_hRf,_hStretch,0,_minHeight,_minWidth,StringP _id _text,_vRf,_vStretch)
sem_Presentation_StructuralP :: (IDP) ->
                                (T_Presentation) ->
                                (T_Presentation)
sem_Presentation_StructuralP (_id) (_child) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let ( _child_allFonts,_child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,_child_unfoldedTree,_child_vRf,_child_vStretch) =
            (_child (_lhs_allFonts)
                    (_lhs_assignedHRef)
                    (_lhs_assignedHeight)
                    (_lhs_assignedVRef)
                    (_lhs_assignedWidth)
                    (_lhs_backgroundColor)
                    (_lhs_fillColor)
                    (_lhs_font)
                    (_lhs_fontMetrics)
                    (_lhs_lineColor)
                    (_lhs_mouseDown)
                    (case _lhs_oldArr of StructuralA _ arr -> arr
                                         _                 -> debug Arr "" EmptyA NoIDA 0 0 0 0 0 0)
                    (_lhs_popupMenuItems)
                    (_lhs_textColor)
                    (_lhs_x)
                    (_lhs_y))
    in  ( _child_allFonts,StructuralA (idAFromP _id) _child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,StructuralP _id  _child_unfoldedTree,_child_vRf,_child_vStretch)
sem_Presentation_WithP :: (AttrRule) ->
                          (T_Presentation) ->
                          (T_Presentation)
sem_Presentation_WithP (_attrRule) (_child) (_lhs_allFonts) (_lhs_assignedHRef) (_lhs_assignedHeight) (_lhs_assignedVRef) (_lhs_assignedWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_x) (_lhs_y) =
    let (_newAttrs) =
            _attrRule ( Inh _lhs_font
                           _lhs_textColor _lhs_lineColor _lhs_fillColor _lhs_backgroundColor
                           _lhs_mouseDown _lhs_popupMenuItems
                           _lhs_assignedWidth _lhs_assignedHeight _lhs_assignedHRef _lhs_assignedVRef
                     , Syn _child_hRf _child_vRf _child_minWidth _child_minHeight
                           _child_hStretch _child_vStretch
                           _child_finalWidth _child_finalHeight _child_finalHRef _child_finalVRef)
        (_newSyn) =
            fst _newAttrs
        (_newInh) =
            snd _newAttrs
        ( _child_allFonts,_child_arrangement,_child_finalHRef,_child_finalHeight,_child_finalVRef,_child_finalWidth,_child_hRf,_child_hStretch,_child_maxFormatterDepth,_child_minHeight,_child_minWidth,_child_unfoldedTree,_child_vRf,_child_vStretch) =
            (_child (let inhs = _newSyn
                     in  font inhs : _lhs_allFonts)
                    (assignedHRef _newSyn)
                    (assignedHeight _newSyn)
                    (assignedVRef _newSyn)
                    (assignedWidth _newSyn)
                    (backgroundColor _newSyn)
                    (fillColor _newSyn)
                    (font _newSyn)
                    (_lhs_fontMetrics)
                    (lineColor _newSyn)
                    (mouseDown _newSyn)
                    (_lhs_oldArr)
                    (popupMenuItems _newSyn)
                    (textColor _newSyn)
                    (_lhs_x)
                    (_lhs_y))
    in  ( _child_allFonts,_child_arrangement,finalHRef _newInh,finalHeight _newInh,finalVRef _newInh,finalWidth _newInh,hRef _newInh,hStretch _newInh,_child_maxFormatterDepth,minHeight _newInh,minWidth _newInh,WithP _attrRule _child_unfoldedTree,vRef _newInh,vStretch _newInh)
-- PresentationList --------------------------------------------
{-
   inherited attributes:
      assignedHRefList     : [Int]
      assignedHeightList   : [Int]
      assignedVRefList     : [Int]
      assignedWidthList    : [Int]
      backgroundColor      : Color
      fillColor            : Color
      font                 : Font
      fontMetrics          : FontMetrics
      lineColor            : Color
      mouseDown            : Maybe UpdateDoc
      oldArrList           : [Arrangement]
      popupMenuItems       : [ PopupMenuItem ]
      textColor            : Color
      xList                : [Int]
      yList                : [Int]

   chained attributes:
      allFonts             : [Font]

   synthesised attributes:
      arrangementList      : [Arrangement]
      finalHRefList        : [Int]
      finalHeightList      : [Int]
      finalVRefList        : [Int]
      finalWidthList       : [Int]
      hRfList              : [Int]
      hStretchList         : [Bool]
      maxFormatterDepthList : [Int]
      minHeightList        : [Int]
      minWidthList         : [Int]
      unfoldedTreeList     : [Presentation]
      vRfList              : [Int]
      vStretchList         : [Bool]

-}
{-
   local variables for PresentationList.Cons:

-}
{-
   local variables for PresentationList.Nil:

-}
-- semantic domain
type T_PresentationList = ([Font]) ->
                          ([Int]) ->
                          ([Int]) ->
                          ([Int]) ->
                          ([Int]) ->
                          (Color) ->
                          (Color) ->
                          (Font) ->
                          (FontMetrics) ->
                          (Color) ->
                          (Maybe UpdateDoc) ->
                          ([Arrangement]) ->
                          ([ PopupMenuItem ]) ->
                          (Color) ->
                          ([Int]) ->
                          ([Int]) ->
                          ( ([Font]),([Arrangement]),([Int]),([Int]),([Int]),([Int]),([Int]),([Bool]),([Int]),([Int]),([Int]),([Presentation]),([Int]),([Bool]))
-- cata
sem_PresentationList :: (PresentationList) ->
                        (T_PresentationList)
sem_PresentationList (list) =
    (foldr (sem_PresentationList_Cons) (sem_PresentationList_Nil) ((map sem_Presentation list)))
sem_PresentationList_Cons :: (T_Presentation) ->
                             (T_PresentationList) ->
                             (T_PresentationList)
sem_PresentationList_Cons (_hd) (_tl) (_lhs_allFonts) (_lhs_assignedHRefList) (_lhs_assignedHeightList) (_lhs_assignedVRefList) (_lhs_assignedWidthList) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArrList) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_xList) (_lhs_yList) =
    let ( _hd_allFonts,_hd_arrangement,_hd_finalHRef,_hd_finalHeight,_hd_finalVRef,_hd_finalWidth,_hd_hRf,_hd_hStretch,_hd_maxFormatterDepth,_hd_minHeight,_hd_minWidth,_hd_unfoldedTree,_hd_vRf,_hd_vStretch) =
            (_hd (_lhs_allFonts) (head _lhs_assignedHRefList) (head _lhs_assignedHeightList) (head _lhs_assignedVRefList) (head _lhs_assignedWidthList) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (head _lhs_oldArrList) (_lhs_popupMenuItems) (_lhs_textColor) (head _lhs_xList) (head _lhs_yList))
        ( _tl_allFonts,_tl_arrangementList,_tl_finalHRefList,_tl_finalHeightList,_tl_finalVRefList,_tl_finalWidthList,_tl_hRfList,_tl_hStretchList,_tl_maxFormatterDepthList,_tl_minHeightList,_tl_minWidthList,_tl_unfoldedTreeList,_tl_vRfList,_tl_vStretchList) =
            (_tl (_hd_allFonts) (tail _lhs_assignedHRefList) (tail _lhs_assignedHeightList) (tail _lhs_assignedVRefList) (tail _lhs_assignedWidthList) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (tail _lhs_oldArrList) (_lhs_popupMenuItems) (_lhs_textColor) (tail _lhs_xList) (tail _lhs_yList))
    in  ( _tl_allFonts
         ,_hd_arrangement : _tl_arrangementList
         ,_hd_finalHRef : _tl_finalHRefList
         ,_hd_finalHeight : _tl_finalHeightList
         ,_hd_finalVRef : _tl_finalVRefList
         ,_hd_finalWidth : _tl_finalWidthList
         ,_hd_hRf : _tl_hRfList
         ,_hd_hStretch : _tl_hStretchList
         ,_hd_maxFormatterDepth : _tl_maxFormatterDepthList
         ,_hd_minHeight : _tl_minHeightList
         ,_hd_minWidth : _tl_minWidthList
         ,_hd_unfoldedTree : _tl_unfoldedTreeList
         ,_hd_vRf : _tl_vRfList
         ,_hd_vStretch : _tl_vStretchList
         )
sem_PresentationList_Nil :: (T_PresentationList)
sem_PresentationList_Nil (_lhs_allFonts) (_lhs_assignedHRefList) (_lhs_assignedHeightList) (_lhs_assignedVRefList) (_lhs_assignedWidthList) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArrList) (_lhs_popupMenuItems) (_lhs_textColor) (_lhs_xList) (_lhs_yList) =
    let 
    in  ( _lhs_allFonts,[],[],[],[],[],[],[],[0],[],[],[],[],[])
-- Root --------------------------------------------------------
{-
   inherited attributes:
      backgroundColor      : Color
      fillColor            : Color
      font                 : Font
      fontMetrics          : FontMetrics
      lineColor            : Color
      mouseDown            : Maybe UpdateDoc
      oldArr               : Arrangement
      popupMenuItems       : [ PopupMenuItem ]
      screenWidth          : Int
      textColor            : Color

   chained attributes:
      allFonts             : [Font]

   synthesised attributes:
      arrangement          : Arrangement
      maxFormatterDepth    : Int
      unfoldedTree         : Presentation

-}
{-
   local variables for Root.Root:

-}
-- semantic domain
type T_Root = ([Font]) ->
              (Color) ->
              (Color) ->
              (Font) ->
              (FontMetrics) ->
              (Color) ->
              (Maybe UpdateDoc) ->
              (Arrangement) ->
              ([ PopupMenuItem ]) ->
              (Int) ->
              (Color) ->
              ( ([Font]),(Arrangement),(Int),(Presentation))
-- cata
sem_Root :: (Root) ->
            (T_Root)
sem_Root ((Root (_presentation))) =
    (sem_Root_Root ((sem_Presentation (_presentation))))
sem_Root_Root :: (T_Presentation) ->
                 (T_Root)
sem_Root_Root (_presentation) (_lhs_allFonts) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_screenWidth) (_lhs_textColor) =
    let ( _presentation_allFonts,_presentation_arrangement,_presentation_finalHRef,_presentation_finalHeight,_presentation_finalVRef,_presentation_finalWidth,_presentation_hRf,_presentation_hStretch,_presentation_maxFormatterDepth,_presentation_minHeight,_presentation_minWidth,_presentation_unfoldedTree,_presentation_vRf,_presentation_vStretch) =
            (_presentation (_lhs_allFonts) (_presentation_hRf) (if _presentation_vStretch then 300 else _presentation_minHeight) (_presentation_vRf) (if _presentation_hStretch then _lhs_screenWidth else _presentation_minWidth) (_lhs_backgroundColor) (_lhs_fillColor) (_lhs_font) (_lhs_fontMetrics) (_lhs_lineColor) (_lhs_mouseDown) (_lhs_oldArr) (_lhs_popupMenuItems) (_lhs_textColor) (0) (0))
    in  ( _presentation_allFonts,_presentation_arrangement,_presentation_maxFormatterDepth,_presentation_unfoldedTree)

