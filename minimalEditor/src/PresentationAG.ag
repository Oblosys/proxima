imports
{
import CommonTypes
import PresLayerTypes
import PresLayerUtils

import XprezLib
import XLatex hiding (bold)

import DocumentEdit

import List
import Maybe
import qualified Data.Map as Map
import Data.Map (Map)


import DocTypes (DocumentLevel (..))
import DocTypes_Generated
import DocUtils_Generated
import DocumentEdit_Generated

presHole focus typeStr nd pth = loc nd $
  structural $ row [text $ "{"++typeStr++"}"] `withColor` black `withbgColor` yellow `withFontFam` ("Courier New")

presParseErr pres =
  loc NoNode $ parsing $ pres `withbgColor` whiteSmoke

presentFocus NoPathD     path pres = pres
presentFocus (PathD pth) path pres = if pth==path then pres `withbgColor` focusCol else pres

focusCol = lightBlue

}

INCLUDE "PresentationAG_Generated.ag"



ATTR EnrichedDoc [ | layoutMap : LayoutMap | ]

SEM EnrichedDoc
  | RootEnr
      lhs.pres = loc (RootDocNode @document []) $  --HACK!! top level loc needs to be a ref to the document
                                                        -- it is used by mkPopupMenuXY in Renderer.
                                                        -- A better implementation of popups will create the menu in
                                                        -- the higher layers. Although it is still a bit unclear where
                 loc (RootEnrNode @self []) $ structural $
                   @root.pres

SEM Root
  | Root
      lhs.pres = loc (RootNode @self []) $ structural $ presentFocus @lhs.focusD @lhs.path $
                     col [ bold $ text "Root"
                         , @graph1.pres 
                         , @tree.pres
                         , @graph2.pres
                         ]

SEM Tree
  | Bin
      lhs.pres = loc (BinNode @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                     row [ text $ "(", @left.pres, text " Bin ", @right.pres, text ")" ]
  | Leaf
      lhs.pres = loc (LeafNode @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                     row [text $ "Leaf", text ""]
                     
                     
SEM Graph
  | Graph
      lhs.pres = loc (GraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                     row [ hSpace 5,
                           boxed $ graph 1100 750 @edges.edges @vertices.vertexIDs @vertices.press
                         ]
      
SEM Vertex [ || ] 
  | Vertex
      lhs.pres = loc (VertexNode @self @lhs.path) $ structural $
                   vertex @x.int @y.int (\a -> (round $ 17*cos a -1, round $ -17*sin a -1)) $
                     col [ rowR 1 [glue, ellipse 36 36 `withRef` (18,18) `withfColor` (200, 255, 255) , glue]
                         , vSpace 4 `withHStretch` True
                         , rowR 1 [glue, boxed 
                                            (row [ hSpace 3, text @name.str `withFont'` ("Arial", 10), hSpace 3])
                                              `withbgColor` (236, 236, 169)
                                  , glue]
                         ]


SEM Edge [ || edge : {Maybe (Int,Int)} ]    
  | Edge
      lhs.edge = Just (@from.int, @to.int)
  | HoleEdge
      lhs.edge = Nothing
  | ParseErrEdge
      lhs.edge = Nothing

SEM List_Edge [ || edges : {[(Int,Int)]} ] 
  | List_Edge
      lhs.edges = catMaybes @elts.edges
  | HoleList_Edge
      lhs.edges = []
  | ParseErrList_Edge
      lhs.edges = []
      
SEM ConsList_Edge [ || edges : {[Maybe (Int,Int)]} ] 
  | Cons_Edge
      lhs.edges = @head.edge : @tail.edges
  | Nil_Edge
      lhs.edges = []

SEM Vertex [ || vertexID : {Maybe Int} ]    
  | Vertex
      lhs.vertexID = Just @id.int
  | HoleVertex
      lhs.vertexID = Nothing
  | ParseErrVertex
      lhs.vertexID = Nothing

SEM List_Vertex [ || vertexIDs : {[Int]} ] 
  | List_Vertex
      lhs.vertexIDs = catMaybes @elts.vertexIDs
  | HoleList_Vertex
      lhs.vertexIDs = []
  | ParseErrList_Vertex
      lhs.vertexIDs = []
      
SEM ConsList_Vertex [ || vertexIDs : {[Maybe Int]} ] 
  | Cons_Vertex
      lhs.vertexIDs = @head.vertexID : @tail.vertexIDs
  | Nil_Vertex
      lhs.vertexIDs = []
