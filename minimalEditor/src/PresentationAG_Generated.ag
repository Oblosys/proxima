
SEM EnrichedDoc
  | RootEnr root.path  = []
  | RootEnr root.ix    = 0

{
type Presentation_Doc_Node_Clip = Presentation Document Node ClipDoc

presentElementXML :: FocusDoc -> Node -> [Int] -> String -> [Presentation_Doc_Node_Clip] -> Presentation_Doc_Node_Clip
presentElementXML focusD node path tag children =
  loc node $ parsing $ presentFocus focusD path $                  
    if null children
    then col [ text $ "<"++tag++"/>"]
    else col [ text  $ "<"++tag++">"
             , row [ text "  ", col children ]
             , text $ "</"++tag++">" ]      
    
presentPrimXMLBool :: Bool -> Presentation_Doc_Node_Clip
presentPrimXMLBool x = text $ "<Bool>"++show x++"<Bool/>"

presentPrimXMLInt :: Int -> Presentation_Doc_Node_Clip
presentPrimXMLInt x = text $ "<Int>"++show x++"<Int/>"

presentPrimXMLString :: String -> Presentation_Doc_Node_Clip
presentPrimXMLString x = text $ "<String>"++x++"<String>"


presentElementTree :: FocusDoc -> Node -> [Int] -> String -> [Presentation_Doc_Node_Clip] -> Presentation_Doc_Node_Clip
presentElementTree focusD node path tag children =
  loc node $ parsing $ presentFocus focusD path $                  
    if null children
    then mkTreeLeaf False $ text $ tag
    else mkTreeNode False True (text tag) children
    
presentPrimTreeBool :: Bool -> Presentation_Doc_Node_Clip
presentPrimTreeBool x =  mkTreeLeaf False $ text $ "Bool: "++show x

presentPrimTreeInt :: Int -> Presentation_Doc_Node_Clip
presentPrimTreeInt x =  mkTreeLeaf False $ text $ "Int: "++show x

presentPrimTreeString :: String -> Presentation_Doc_Node_Clip
presentPrimTreeString x =  mkTreeLeaf False $ text $ "String: "++x



}                   

SEM EnrichedDoc
  | HoleEnrichedDoc     lhs.pres = presHole @lhs.focusD "EnrichedDoc" (HoleEnrichedDocNode @self []) []
  | ParseErrEnrichedDoc lhs.pres = presParseErr @node @presentation



SEM String_
  | String_
      lhs.pres = loc (String_Node @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                   row [text @string, text ""] -- ? why this empty string?

SEM String_ [ | | length : Int str : String ]
  | String_ lhs.length = length @string
            lhs.str    = @string
  | ParseErrString_ HoleString_
            lhs.length = 0
            lhs.str    = ""

SEM Int_
  | Int_
      lhs.pres = loc (Int_Node @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                   row [text $ show @int, text ""] -- ? why this empty string?

SEM Int_ [ | | int : Int ]
  | Int_    lhs.int    = @int
  | ParseErrInt_ HoleInt_
            lhs.int    = 0

SEM Bool_
  | Bool_
      lhs.pres = loc (Bool_Node @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                   row [text $ show @bool, text ""] -- ? why this empty string?

SEM Bool_ [ | | bool : Bool ]
  | Bool_    lhs.bool    = @bool
  | ParseErrBool_ HoleBool_
            lhs.bool    = False



----- GENERATED PART STARTS HERE. DO NOT EDIT ON OR BEYOND THIS LINE -----

{- ------------------------------------

 generated part

------------------------------------- -}


DATA EnrichedDoc | RootEnr id:IDD root:Root document:Document 
                 | HoleEnrichedDoc
                 | ParseErrEnrichedDoc Node presentation:Presentation_Doc_Node_Clip


DATA String_ | String_ idd:IDD string:String 
             | HoleString_
             | ParseErrString_ Node presentation:Presentation_Doc_Node_Clip


DATA Bool_ | Bool_ idd:IDD bool:Bool 
           | HoleBool_
           | ParseErrBool_ Node presentation:Presentation_Doc_Node_Clip


DATA Int_ | Int_ idd:IDD int:Int 
          | HoleInt_
          | ParseErrInt_ Node presentation:Presentation_Doc_Node_Clip


DATA Dummy | Dummy idd:IDD dummys:List_Dummy string_:String_ bool_:Bool_ int_:Int_ 
           | HoleDummy
           | ParseErrDummy Node presentation:Presentation_Doc_Node_Clip


DATA Root | Root idd:IDD tree:Tree 
          | HoleRoot
          | ParseErrRoot Node presentation:Presentation_Doc_Node_Clip


DATA Tree | Bin idd:IDD left:Tree right:Tree 
          | Leaf idd:IDD 
          | HoleTree
          | ParseErrTree Node presentation:Presentation_Doc_Node_Clip


DATA List_Dummy | List_Dummy idd:IDD elts:ConsList_Dummy 
                | HoleList_Dummy
                | ParseErrList_Dummy Node presentation:Presentation_Doc_Node_Clip


DATA ConsList_Dummy | Cons_Dummy head:Dummy tail:ConsList_Dummy 
                    | Nil_Dummy 


SEM String_
  | HoleString_     lhs.pres = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.pres = presParseErr @node @presentation


SEM Bool_
  | HoleBool_     lhs.pres = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.pres = presParseErr @node @presentation


SEM Int_
  | HoleInt_     lhs.pres = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.pres = presParseErr @node @presentation


SEM Dummy
  | Dummy dummys.pIdC = @lhs.pIdC + 0
          int_.pIdC = @bool_.pIdC
          bool_.pIdC = @string_.pIdC
          string_.pIdC = @dummys.pIdC
          lhs.pIdC = @int_.pIdC
  | HoleDummy     lhs.pres = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.pres = presParseErr @node @presentation


SEM Dummy
  | Dummy dummys.path  = @lhs.path++[0]
          string_.path  = @lhs.path++[1]
          bool_.path  = @lhs.path++[2]
          int_.path  = @lhs.path++[3]


SEM Root
  | Root tree.pIdC = @lhs.pIdC + 0
         lhs.pIdC = @tree.pIdC
  | HoleRoot     lhs.pres = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.pres = presParseErr @node @presentation


SEM Root
  | Root tree.path  = @lhs.path++[0]


SEM Tree
  | Bin left.pIdC = @lhs.pIdC + 0
        right.pIdC = @left.pIdC
        lhs.pIdC = @right.pIdC
  | HoleTree     lhs.pres = presHole @lhs.focusD "Tree" (HoleTreeNode @self @lhs.path) @lhs.path
  | ParseErrTree lhs.pres = presParseErr @node @presentation


SEM Tree
  | Bin left.path  = @lhs.path++[0]
        right.path  = @lhs.path++[1]

SEM List_Dummy
  | List_Dummy
      lhs.press = map ( loc (List_DummyNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Dummy     lhs.press = []
  | ParseErrList_Dummy lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Dummy
  | Cons_Dummy head.path  = @lhs.path++[@lhs.ix]
              tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Dummy      lhs.press = []


SEM ConsList_Dummy [ ix : Int | | ]
  | Cons_Dummy     tail.ix  = @lhs.ix + 1


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Tree List_Dummy ConsList_Dummy
       [ |  pIdC : Int  | ]


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Tree List_Dummy ConsList_Dummy
       [ focusD : FocusDoc | | ]


ATTR  String_ Bool_ Int_ Dummy Root Tree List_Dummy ConsList_Dummy
       [ path : {[Int]}  | | ]


ATTR  List_Dummy ConsList_Dummy [ | | press : {[Presentation_Doc_Node_Clip]} ]


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Tree [ | | pres : Presentation_Doc_Node_Clip ]


ATTR  String_ Bool_ Int_ Dummy Root Tree [ ix : Int || ]



-- Default XML presentation

SEM String_ [ || presXML : Presentation_Doc_Node_Clip ]
  | String_
      lhs.presXML = presentElementXML @lhs.focusD (String_Node @self @lhs.path) @lhs.path "String_" [ presentPrimXMLString @string ] 
  | HoleString_     lhs.presXML = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.presXML = presParseErr @node @presentation

SEM Bool_ [ || presXML : Presentation_Doc_Node_Clip ]
  | Bool_
      lhs.presXML = presentElementXML @lhs.focusD (Bool_Node @self @lhs.path) @lhs.path "Bool_" [ presentPrimXMLBool @bool ] 
  | HoleBool_     lhs.presXML = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.presXML = presParseErr @node @presentation

SEM Int_ [ || presXML : Presentation_Doc_Node_Clip ]
  | Int_
      lhs.presXML = presentElementXML @lhs.focusD (Int_Node @self @lhs.path) @lhs.path "Int_" [ presentPrimXMLInt @int ] 
  | HoleInt_     lhs.presXML = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.presXML = presParseErr @node @presentation

SEM Dummy [ || presXML : Presentation_Doc_Node_Clip ]
  | Dummy
      lhs.presXML = presentElementXML @lhs.focusD (DummyNode @self @lhs.path) @lhs.path "Dummy" [ @dummys.presXML, @string_.presXML, @bool_.presXML, @int_.presXML ] 
  | HoleDummy     lhs.presXML = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.presXML = presParseErr @node @presentation

SEM Root [ || presXML : Presentation_Doc_Node_Clip ]
  | Root
      lhs.presXML = presentElementXML @lhs.focusD (RootNode @self @lhs.path) @lhs.path "Root" [ @tree.presXML ] 
  | HoleRoot     lhs.presXML = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presXML = presParseErr @node @presentation

SEM Tree [ || presXML : Presentation_Doc_Node_Clip ]
  | Bin
      lhs.presXML = presentElementXML @lhs.focusD (BinNode @self @lhs.path) @lhs.path "Bin" [ @left.presXML, @right.presXML ] 
  | Leaf
      lhs.presXML = presentElementXML @lhs.focusD (LeafNode @self @lhs.path) @lhs.path "Leaf" [  ] 
  | HoleTree     lhs.presXML = presHole @lhs.focusD "Tree" (HoleTreeNode @self @lhs.path) @lhs.path
  | ParseErrTree lhs.presXML = presParseErr @node @presentation

SEM List_Dummy [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @node @presentation
  | HoleList_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Dummy" (HoleList_DummyNode @self @lhs.path) @lhs.path

SEM ConsList_Dummy [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Dummy     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Dummy      lhs.pressXML  = []




-- Default Tree presentation

SEM String_ [ || presTree : Presentation_Doc_Node_Clip ]
  | String_
      lhs.presTree = presentElementTree @lhs.focusD (String_Node @self @lhs.path) @lhs.path "String_" [ presentPrimTreeString @string ] 
  | HoleString_     lhs.presTree = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.presTree = presParseErr @node @presentation

SEM Bool_ [ || presTree : Presentation_Doc_Node_Clip ]
  | Bool_
      lhs.presTree = presentElementTree @lhs.focusD (Bool_Node @self @lhs.path) @lhs.path "Bool_" [ presentPrimTreeBool @bool ] 
  | HoleBool_     lhs.presTree = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.presTree = presParseErr @node @presentation

SEM Int_ [ || presTree : Presentation_Doc_Node_Clip ]
  | Int_
      lhs.presTree = presentElementTree @lhs.focusD (Int_Node @self @lhs.path) @lhs.path "Int_" [ presentPrimTreeInt @int ] 
  | HoleInt_     lhs.presTree = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.presTree = presParseErr @node @presentation

SEM Dummy [ || presTree : Presentation_Doc_Node_Clip ]
  | Dummy
      lhs.presTree = presentElementTree @lhs.focusD (DummyNode @self @lhs.path) @lhs.path "Dummy" [ @dummys.presTree, @string_.presTree, @bool_.presTree, @int_.presTree ] 
  | HoleDummy     lhs.presTree = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.presTree = presParseErr @node @presentation

SEM Root [ || presTree : Presentation_Doc_Node_Clip ]
  | Root
      lhs.presTree = presentElementTree @lhs.focusD (RootNode @self @lhs.path) @lhs.path "Root" [ @tree.presTree ] 
  | HoleRoot     lhs.presTree = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presTree = presParseErr @node @presentation

SEM Tree [ || presTree : Presentation_Doc_Node_Clip ]
  | Bin
      lhs.presTree = presentElementTree @lhs.focusD (BinNode @self @lhs.path) @lhs.path "Bin" [ @left.presTree, @right.presTree ] 
  | Leaf
      lhs.presTree = presentElementTree @lhs.focusD (LeafNode @self @lhs.path) @lhs.path "Leaf" [  ] 
  | HoleTree     lhs.presTree = presHole @lhs.focusD "Tree" (HoleTreeNode @self @lhs.path) @lhs.path
  | ParseErrTree lhs.presTree = presParseErr @node @presentation

SEM List_Dummy [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @node @presentation
  | HoleList_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Dummy" (HoleList_DummyNode @self @lhs.path) @lhs.path

SEM ConsList_Dummy [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Dummy     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Dummy      lhs.pressTree  = []

