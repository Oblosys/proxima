----- GENERATED PART STARTS HERE. DO NOT EDIT ON OR BEYOND THIS LINE -----

--------------------------------------------------------------------------
-- presentationSheet                                                    --
--------------------------------------------------------------------------

WRAPPER Root

{
-- type PresentationSheet doc enr node clip token = 
--        enr -> FocusDoc -> WhitespaceMap -> IDPCounter -> 
--        (WhitespaceMap, IDPCounter, Presentation doc node clip token)

presentationSheet :: PresentationSheet Document EnrichedDoc Node ClipDoc UserToken
presentationSheet enrichedDoc focusD whitespaceMap pIdC = 
  let (Syn_EnrichedDoc pIdC' pres self whitespaceMap') = 
        wrap_EnrichedDoc (sem_EnrichedDoc enrichedDoc) (Inh_EnrichedDoc focusD pIdC [] whitespaceMap)
  in  (whitespaceMap', pIdC', pres)

{- 
A type error here means that extra attributes were declared on EnrichedDoc
The attribute signature for EnrichedDoc should be:

EnrichedDoc  [ focusD : FocusDoc path : Path
             | pIdC : Int layoutMap : WhitespaceMap
             | pres : Presentation_Doc_Node_Clip_Token EnrichedDoc 
             ]
-}
}



--------------------------------------------------------------------------
-- AG data type                                                         --
--------------------------------------------------------------------------

DATA EnrichedDoc
  | RootEnr root:Root
  | HoleEnrichedDoc
  | ParseErrEnrichedDoc error:{(ParseError Document Node ClipDoc UserToken)}

DATA Root
  | Root graph:Graph title:String sections:List_Section
  | HoleRoot
  | ParseErrRoot error:{(ParseError Document Node ClipDoc UserToken)}

DATA Section
  | Section title:String paragraphs:List_Paragraph subsections:List_Subsection
  | HoleSection
  | ParseErrSection error:{(ParseError Document Node ClipDoc UserToken)}

DATA Subsection
  | Subsection title:String paragraphs:List_Paragraph subsubsections:List_Subsubsection
  | HoleSubsection
  | ParseErrSubsection error:{(ParseError Document Node ClipDoc UserToken)}

DATA Subsubsection
  | Subsubsection title:String paragraphs:List_Paragraph
  | HoleSubsubsection
  | ParseErrSubsubsection error:{(ParseError Document Node ClipDoc UserToken)}

DATA Paragraph
  | Paragraph words:List_Word
  | SubgraphPara subgraph:Subgraph
  | HoleParagraph
  | ParseErrParagraph error:{(ParseError Document Node ClipDoc UserToken)}

DATA Word
  | Word word:String
  | NodeRef nodeName:String
  | Label label:String
  | LabelRef label:String
  | HoleWord
  | ParseErrWord error:{(ParseError Document Node ClipDoc UserToken)}

DATA Graph
  | Graph dirty:Dirty vertices:List_Vertex edges:List_Edge
  | HoleGraph
  | ParseErrGraph error:{(ParseError Document Node ClipDoc UserToken)}

DATA Vertex
  | Vertex name:String shape:Shape id:Int x:Int y:Int
  | HoleVertex
  | ParseErrVertex error:{(ParseError Document Node ClipDoc UserToken)}

DATA Shape
  | Circle
  | Square
  | HoleShape
  | ParseErrShape error:{(ParseError Document Node ClipDoc UserToken)}

DATA Edge
  | Edge from:Int to:Int
  | HoleEdge
  | ParseErrEdge error:{(ParseError Document Node ClipDoc UserToken)}

DATA Subgraph
  | Subgraph dirty:Dirty vertices:List_Vertex edges:List_Edge
  | HoleSubgraph
  | ParseErrSubgraph error:{(ParseError Document Node ClipDoc UserToken)}

DATA Dirty
  | Dirty
  | Clean
  | HoleDirty
  | ParseErrDirty error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Section
  | List_Section elts:ConsList_Section
  | HoleList_Section
  | ParseErrList_Section error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Paragraph
  | List_Paragraph elts:ConsList_Paragraph
  | HoleList_Paragraph
  | ParseErrList_Paragraph error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Subsection
  | List_Subsection elts:ConsList_Subsection
  | HoleList_Subsection
  | ParseErrList_Subsection error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Subsubsection
  | List_Subsubsection elts:ConsList_Subsubsection
  | HoleList_Subsubsection
  | ParseErrList_Subsubsection error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Word
  | List_Word elts:ConsList_Word
  | HoleList_Word
  | ParseErrList_Word error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Vertex
  | List_Vertex elts:ConsList_Vertex
  | HoleList_Vertex
  | ParseErrList_Vertex error:{(ParseError Document Node ClipDoc UserToken)}

DATA List_Edge
  | List_Edge elts:ConsList_Edge
  | HoleList_Edge
  | ParseErrList_Edge error:{(ParseError Document Node ClipDoc UserToken)}

DATA ConsList_Section
  | Cons_Section head:Section tail:ConsList_Section
  | Nil_Section

DATA ConsList_Paragraph
  | Cons_Paragraph head:Paragraph tail:ConsList_Paragraph
  | Nil_Paragraph

DATA ConsList_Subsection
  | Cons_Subsection head:Subsection tail:ConsList_Subsection
  | Nil_Subsection

DATA ConsList_Subsubsection
  | Cons_Subsubsection head:Subsubsection tail:ConsList_Subsubsection
  | Nil_Subsubsection

DATA ConsList_Word
  | Cons_Word head:Word tail:ConsList_Word
  | Nil_Word

DATA ConsList_Vertex
  | Cons_Vertex head:Vertex tail:ConsList_Vertex
  | Nil_Vertex

DATA ConsList_Edge
  | Cons_Edge head:Edge tail:ConsList_Edge
  | Nil_Edge




--------------------------------------------------------------------------
-- Attr declarations                                                    --
--------------------------------------------------------------------------

ATTR EnrichedDoc Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty List_Section List_Paragraph List_Subsection List_Subsubsection List_Word List_Vertex List_Edge ConsList_Section ConsList_Paragraph ConsList_Subsection ConsList_Subsubsection ConsList_Word ConsList_Vertex ConsList_Edge
     [ focusD : FocusDoc path : Path |  pIdC : Int whitespaceMap : WhitespaceMap | ]

ATTR EnrichedDoc Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty
     [ | | pres : Presentation_Doc_Node_Clip_Token ]

ATTR Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty List_Section List_Paragraph List_Subsection List_Subsubsection List_Word List_Vertex List_Edge
     [ | | path : Path presXML : Presentation_Doc_Node_Clip_Token presTree : Presentation_Doc_Node_Clip_Token ]

ATTR List_Section List_Paragraph List_Subsection List_Subsubsection List_Word List_Vertex List_Edge ConsList_Section ConsList_Paragraph ConsList_Subsection ConsList_Subsubsection ConsList_Word ConsList_Vertex ConsList_Edge
     [ | | press : {[Presentation_Doc_Node_Clip_Token]} ]

ATTR Section Paragraph Subsection Subsubsection Word Vertex Edge ConsList_Section ConsList_Paragraph ConsList_Subsection ConsList_Subsubsection ConsList_Word ConsList_Vertex ConsList_Edge
     [ ix : Int | | ]

ATTR ConsList_Section ConsList_Paragraph ConsList_Subsection ConsList_Subsubsection ConsList_Word ConsList_Vertex ConsList_Edge
     [ | | pressXML : {[Presentation_Doc_Node_Clip_Token]} pressTree : {[Presentation_Doc_Node_Clip_Token]} ]




--------------------------------------------------------------------------
-- General sem functions                                                --
--------------------------------------------------------------------------

SEM EnrichedDoc
  | RootEnr 
      root.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @root.pIdC
      root.path  = @lhs.path++[0]
  | HoleEnrichedDoc     lhs.pres = presHole @lhs.focusD "EnrichedDoc" (Node_HoleEnrichedDoc @self @lhs.path) @lhs.path
  | ParseErrEnrichedDoc lhs.pres = presParseErr (Node_ParseErrEnrichedDoc @self @lhs.path) @error

SEM Root
  | Root 
      graph.pIdC = @lhs.pIdC + 0
      sections.pIdC = @graph.pIdC
      lhs.pIdC = @sections.pIdC
      graph.path  = @lhs.path++[0]
      sections.path  = @lhs.path++[2]
  | HoleRoot     lhs.pres = presHole @lhs.focusD "Root" (Node_HoleRoot @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.pres = presParseErr (Node_ParseErrRoot @self @lhs.path) @error

SEM Section
  | Section 
      paragraphs.pIdC = @lhs.pIdC + 0
      subsections.pIdC = @paragraphs.pIdC
      lhs.pIdC = @subsections.pIdC
      paragraphs.path  = @lhs.path++[1]
      subsections.path  = @lhs.path++[2]
  | HoleSection     lhs.pres = presHole @lhs.focusD "Section" (Node_HoleSection @self @lhs.path) @lhs.path
  | ParseErrSection lhs.pres = presParseErr (Node_ParseErrSection @self @lhs.path) @error

SEM Subsection
  | Subsection 
      paragraphs.pIdC = @lhs.pIdC + 0
      subsubsections.pIdC = @paragraphs.pIdC
      lhs.pIdC = @subsubsections.pIdC
      paragraphs.path  = @lhs.path++[1]
      subsubsections.path  = @lhs.path++[2]
  | HoleSubsection     lhs.pres = presHole @lhs.focusD "Subsection" (Node_HoleSubsection @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.pres = presParseErr (Node_ParseErrSubsection @self @lhs.path) @error

SEM Subsubsection
  | Subsubsection 
      paragraphs.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @paragraphs.pIdC
      paragraphs.path  = @lhs.path++[1]
  | HoleSubsubsection     lhs.pres = presHole @lhs.focusD "Subsubsection" (Node_HoleSubsubsection @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.pres = presParseErr (Node_ParseErrSubsubsection @self @lhs.path) @error

SEM Paragraph
  | Paragraph 
      words.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @words.pIdC
      words.path  = @lhs.path++[0]
  | SubgraphPara 
      subgraph.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @subgraph.pIdC
      subgraph.path  = @lhs.path++[0]
  | HoleParagraph     lhs.pres = presHole @lhs.focusD "Paragraph" (Node_HoleParagraph @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.pres = presParseErr (Node_ParseErrParagraph @self @lhs.path) @error

SEM Word
  | Word 
      lhs.pIdC = @lhs.pIdC + 0
  | NodeRef 
      lhs.pIdC = @lhs.pIdC + 0
  | Label 
      lhs.pIdC = @lhs.pIdC + 0
  | LabelRef 
      lhs.pIdC = @lhs.pIdC + 0
  | HoleWord     lhs.pres = presHole @lhs.focusD "Word" (Node_HoleWord @self @lhs.path) @lhs.path
  | ParseErrWord lhs.pres = presParseErr (Node_ParseErrWord @self @lhs.path) @error

SEM Graph
  | Graph 
      dirty.pIdC = @lhs.pIdC + 0
      vertices.pIdC = @dirty.pIdC
      edges.pIdC = @vertices.pIdC
      lhs.pIdC = @edges.pIdC
      dirty.path  = @lhs.path++[0]
      vertices.path  = @lhs.path++[1]
      edges.path  = @lhs.path++[2]
  | HoleGraph     lhs.pres = presHole @lhs.focusD "Graph" (Node_HoleGraph @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.pres = presParseErr (Node_ParseErrGraph @self @lhs.path) @error

SEM Vertex
  | Vertex 
      shape.pIdC = @lhs.pIdC + 0
      lhs.pIdC = @shape.pIdC
      shape.path  = @lhs.path++[1]
  | HoleVertex     lhs.pres = presHole @lhs.focusD "Vertex" (Node_HoleVertex @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.pres = presParseErr (Node_ParseErrVertex @self @lhs.path) @error

SEM Shape
  | Circle 
      lhs.pIdC = @lhs.pIdC + 0
  | Square 
      lhs.pIdC = @lhs.pIdC + 0
  | HoleShape     lhs.pres = presHole @lhs.focusD "Shape" (Node_HoleShape @self @lhs.path) @lhs.path
  | ParseErrShape lhs.pres = presParseErr (Node_ParseErrShape @self @lhs.path) @error

SEM Edge
  | Edge 
      lhs.pIdC = @lhs.pIdC + 0
  | HoleEdge     lhs.pres = presHole @lhs.focusD "Edge" (Node_HoleEdge @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.pres = presParseErr (Node_ParseErrEdge @self @lhs.path) @error

SEM Subgraph
  | Subgraph 
      dirty.pIdC = @lhs.pIdC + 0
      vertices.pIdC = @dirty.pIdC
      edges.pIdC = @vertices.pIdC
      lhs.pIdC = @edges.pIdC
      dirty.path  = @lhs.path++[0]
      vertices.path  = @lhs.path++[1]
      edges.path  = @lhs.path++[2]
  | HoleSubgraph     lhs.pres = presHole @lhs.focusD "Subgraph" (Node_HoleSubgraph @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.pres = presParseErr (Node_ParseErrSubgraph @self @lhs.path) @error

SEM Dirty
  | Dirty 
      lhs.pIdC = @lhs.pIdC + 0
  | Clean 
      lhs.pIdC = @lhs.pIdC + 0
  | HoleDirty     lhs.pres = presHole @lhs.focusD "Dirty" (Node_HoleDirty @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.pres = presParseErr (Node_ParseErrDirty @self @lhs.path) @error

SEM List_Section
  | List_Section
      lhs.press = map ( loc (Node_List_Section @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Section     lhs.press = []
  | ParseErrList_Section lhs.press = [ presParseErr (Node_ParseErrList_Section @self @lhs.path) @error ]

SEM List_Paragraph
  | List_Paragraph
      lhs.press = map ( loc (Node_List_Paragraph @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Paragraph     lhs.press = []
  | ParseErrList_Paragraph lhs.press = [ presParseErr (Node_ParseErrList_Paragraph @self @lhs.path) @error ]

SEM List_Subsection
  | List_Subsection
      lhs.press = map ( loc (Node_List_Subsection @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Subsection     lhs.press = []
  | ParseErrList_Subsection lhs.press = [ presParseErr (Node_ParseErrList_Subsection @self @lhs.path) @error ]

SEM List_Subsubsection
  | List_Subsubsection
      lhs.press = map ( loc (Node_List_Subsubsection @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Subsubsection     lhs.press = []
  | ParseErrList_Subsubsection lhs.press = [ presParseErr (Node_ParseErrList_Subsubsection @self @lhs.path) @error ]

SEM List_Word
  | List_Word
      lhs.press = map ( loc (Node_List_Word @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Word     lhs.press = []
  | ParseErrList_Word lhs.press = [ presParseErr (Node_ParseErrList_Word @self @lhs.path) @error ]

SEM List_Vertex
  | List_Vertex
      lhs.press = map ( loc (Node_List_Vertex @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Vertex     lhs.press = []
  | ParseErrList_Vertex lhs.press = [ presParseErr (Node_ParseErrList_Vertex @self @lhs.path) @error ]

SEM List_Edge
  | List_Edge
      lhs.press = map ( loc (Node_List_Edge @self @lhs.path)
                      . presentFocus @lhs.focusD @lhs.path )
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Edge     lhs.press = []
  | ParseErrList_Edge lhs.press = [ presParseErr (Node_ParseErrList_Edge @self @lhs.path) @error ]

SEM ConsList_Section
  | Cons_Section
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Section      lhs.press = []

SEM ConsList_Paragraph
  | Cons_Paragraph
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Paragraph      lhs.press = []

SEM ConsList_Subsection
  | Cons_Subsection
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Subsection      lhs.press = []

SEM ConsList_Subsubsection
  | Cons_Subsubsection
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Subsubsection      lhs.press = []

SEM ConsList_Word
  | Cons_Word
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Word      lhs.press = []

SEM ConsList_Vertex
  | Cons_Vertex
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Vertex      lhs.press = []

SEM ConsList_Edge
  | Cons_Edge
      head.path  = @lhs.path++[@lhs.ix]
      tail.path = @lhs.path
      lhs.press = @head.pres : @tail.press
      head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
      tail.pIdC = @head.pIdC
      lhs.pIdC = @tail.pIdC
      tail.ix  = @lhs.ix + 1
  | Nil_Edge      lhs.press = []




--------------------------------------------------------------------------
-- Synthesized path rules                                               --
--------------------------------------------------------------------------

SEM Root
  | Root lhs.path = @lhs.path

SEM Section
  | Section lhs.path = @lhs.path

SEM Subsection
  | Subsection lhs.path = @lhs.path

SEM Subsubsection
  | Subsubsection lhs.path = @lhs.path

SEM Paragraph
  | Paragraph lhs.path = @lhs.path
  | SubgraphPara lhs.path = @lhs.path

SEM Word
  | Word lhs.path = @lhs.path
  | NodeRef lhs.path = @lhs.path
  | Label lhs.path = @lhs.path
  | LabelRef lhs.path = @lhs.path

SEM Graph
  | Graph lhs.path = @lhs.path

SEM Vertex
  | Vertex lhs.path = @lhs.path

SEM Shape
  | Circle lhs.path = @lhs.path
  | Square lhs.path = @lhs.path

SEM Edge
  | Edge lhs.path = @lhs.path

SEM Subgraph
  | Subgraph lhs.path = @lhs.path

SEM Dirty
  | Dirty lhs.path = @lhs.path
  | Clean lhs.path = @lhs.path

SEM List_Section
  | List_Section lhs.path = @lhs.path

SEM List_Paragraph
  | List_Paragraph lhs.path = @lhs.path

SEM List_Subsection
  | List_Subsection lhs.path = @lhs.path

SEM List_Subsubsection
  | List_Subsubsection lhs.path = @lhs.path

SEM List_Word
  | List_Word lhs.path = @lhs.path

SEM List_Vertex
  | List_Vertex lhs.path = @lhs.path

SEM List_Edge
  | List_Edge lhs.path = @lhs.path




--------------------------------------------------------------------------
-- Sem functions for XML presentation                                   --
--------------------------------------------------------------------------

SEM Root
  | Root
      lhs.presXML = presentElementXML @lhs.focusD (Node_Root @self @lhs.path) @lhs.path "Root" [ @graph.presXML, presentPrimXMLString @title, @sections.presXML ] 
  | HoleRoot     lhs.presXML = presHole @lhs.focusD "Root" (Node_HoleRoot @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presXML = presParseErr (Node_ParseErrRoot @self @lhs.path) @error

SEM Section
  | Section
      lhs.presXML = presentElementXML @lhs.focusD (Node_Section @self @lhs.path) @lhs.path "Section" [ presentPrimXMLString @title, @paragraphs.presXML, @subsections.presXML ] 
  | HoleSection     lhs.presXML = presHole @lhs.focusD "Section" (Node_HoleSection @self @lhs.path) @lhs.path
  | ParseErrSection lhs.presXML = presParseErr (Node_ParseErrSection @self @lhs.path) @error

SEM Subsection
  | Subsection
      lhs.presXML = presentElementXML @lhs.focusD (Node_Subsection @self @lhs.path) @lhs.path "Subsection" [ presentPrimXMLString @title, @paragraphs.presXML, @subsubsections.presXML ] 
  | HoleSubsection     lhs.presXML = presHole @lhs.focusD "Subsection" (Node_HoleSubsection @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.presXML = presParseErr (Node_ParseErrSubsection @self @lhs.path) @error

SEM Subsubsection
  | Subsubsection
      lhs.presXML = presentElementXML @lhs.focusD (Node_Subsubsection @self @lhs.path) @lhs.path "Subsubsection" [ presentPrimXMLString @title, @paragraphs.presXML ] 
  | HoleSubsubsection     lhs.presXML = presHole @lhs.focusD "Subsubsection" (Node_HoleSubsubsection @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.presXML = presParseErr (Node_ParseErrSubsubsection @self @lhs.path) @error

SEM Paragraph
  | Paragraph
      lhs.presXML = presentElementXML @lhs.focusD (Node_Paragraph @self @lhs.path) @lhs.path "Paragraph" [ @words.presXML ] 
  | SubgraphPara
      lhs.presXML = presentElementXML @lhs.focusD (Node_SubgraphPara @self @lhs.path) @lhs.path "SubgraphPara" [ @subgraph.presXML ] 
  | HoleParagraph     lhs.presXML = presHole @lhs.focusD "Paragraph" (Node_HoleParagraph @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.presXML = presParseErr (Node_ParseErrParagraph @self @lhs.path) @error

SEM Word
  | Word
      lhs.presXML = presentElementXML @lhs.focusD (Node_Word @self @lhs.path) @lhs.path "Word" [ presentPrimXMLString @word ] 
  | NodeRef
      lhs.presXML = presentElementXML @lhs.focusD (Node_NodeRef @self @lhs.path) @lhs.path "NodeRef" [ presentPrimXMLString @nodeName ] 
  | Label
      lhs.presXML = presentElementXML @lhs.focusD (Node_Label @self @lhs.path) @lhs.path "Label" [ presentPrimXMLString @label ] 
  | LabelRef
      lhs.presXML = presentElementXML @lhs.focusD (Node_LabelRef @self @lhs.path) @lhs.path "LabelRef" [ presentPrimXMLString @label ] 
  | HoleWord     lhs.presXML = presHole @lhs.focusD "Word" (Node_HoleWord @self @lhs.path) @lhs.path
  | ParseErrWord lhs.presXML = presParseErr (Node_ParseErrWord @self @lhs.path) @error

SEM Graph
  | Graph
      lhs.presXML = presentElementXML @lhs.focusD (Node_Graph @self @lhs.path) @lhs.path "Graph" [ @dirty.presXML, @vertices.presXML, @edges.presXML ] 
  | HoleGraph     lhs.presXML = presHole @lhs.focusD "Graph" (Node_HoleGraph @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.presXML = presParseErr (Node_ParseErrGraph @self @lhs.path) @error

SEM Vertex
  | Vertex
      lhs.presXML = presentElementXML @lhs.focusD (Node_Vertex @self @lhs.path) @lhs.path "Vertex" [ presentPrimXMLString @name, @shape.presXML, presentPrimXMLInt @id, presentPrimXMLInt @x, presentPrimXMLInt @y ] 
  | HoleVertex     lhs.presXML = presHole @lhs.focusD "Vertex" (Node_HoleVertex @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.presXML = presParseErr (Node_ParseErrVertex @self @lhs.path) @error

SEM Shape
  | Circle
      lhs.presXML = presentElementXML @lhs.focusD (Node_Circle @self @lhs.path) @lhs.path "Circle" [  ] 
  | Square
      lhs.presXML = presentElementXML @lhs.focusD (Node_Square @self @lhs.path) @lhs.path "Square" [  ] 
  | HoleShape     lhs.presXML = presHole @lhs.focusD "Shape" (Node_HoleShape @self @lhs.path) @lhs.path
  | ParseErrShape lhs.presXML = presParseErr (Node_ParseErrShape @self @lhs.path) @error

SEM Edge
  | Edge
      lhs.presXML = presentElementXML @lhs.focusD (Node_Edge @self @lhs.path) @lhs.path "Edge" [ presentPrimXMLInt @from, presentPrimXMLInt @to ] 
  | HoleEdge     lhs.presXML = presHole @lhs.focusD "Edge" (Node_HoleEdge @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.presXML = presParseErr (Node_ParseErrEdge @self @lhs.path) @error

SEM Subgraph
  | Subgraph
      lhs.presXML = presentElementXML @lhs.focusD (Node_Subgraph @self @lhs.path) @lhs.path "Subgraph" [ @dirty.presXML, @vertices.presXML, @edges.presXML ] 
  | HoleSubgraph     lhs.presXML = presHole @lhs.focusD "Subgraph" (Node_HoleSubgraph @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.presXML = presParseErr (Node_ParseErrSubgraph @self @lhs.path) @error

SEM Dirty
  | Dirty
      lhs.presXML = presentElementXML @lhs.focusD (Node_Dirty @self @lhs.path) @lhs.path "Dirty" [  ] 
  | Clean
      lhs.presXML = presentElementXML @lhs.focusD (Node_Clean @self @lhs.path) @lhs.path "Clean" [  ] 
  | HoleDirty     lhs.presXML = presHole @lhs.focusD "Dirty" (Node_HoleDirty @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.presXML = presParseErr (Node_ParseErrDirty @self @lhs.path) @error

SEM List_Section
  | List_Section
      lhs.presXML = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Section
      lhs.presXML = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Section @self @lhs.path) @error
  | HoleList_Section
      lhs.presXML = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Section" (Node_HoleList_Section @self @lhs.path) @lhs.path

SEM List_Paragraph
  | List_Paragraph
      lhs.presXML = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Paragraph
      lhs.presXML = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Paragraph @self @lhs.path) @error
  | HoleList_Paragraph
      lhs.presXML = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Paragraph" (Node_HoleList_Paragraph @self @lhs.path) @lhs.path

SEM List_Subsection
  | List_Subsection
      lhs.presXML = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Subsection
      lhs.presXML = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Subsection @self @lhs.path) @error
  | HoleList_Subsection
      lhs.presXML = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Subsection" (Node_HoleList_Subsection @self @lhs.path) @lhs.path

SEM List_Subsubsection
  | List_Subsubsection
      lhs.presXML = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Subsubsection
      lhs.presXML = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Subsubsection @self @lhs.path) @error
  | HoleList_Subsubsection
      lhs.presXML = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Subsubsection" (Node_HoleList_Subsubsection @self @lhs.path) @lhs.path

SEM List_Word
  | List_Word
      lhs.presXML = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Word
      lhs.presXML = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Word @self @lhs.path) @error
  | HoleList_Word
      lhs.presXML = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Word" (Node_HoleList_Word @self @lhs.path) @lhs.path

SEM List_Vertex
  | List_Vertex
      lhs.presXML = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Vertex
      lhs.presXML = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Vertex @self @lhs.path) @error
  | HoleList_Vertex
      lhs.presXML = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Vertex" (Node_HoleList_Vertex @self @lhs.path) @lhs.path

SEM List_Edge
  | List_Edge
      lhs.presXML = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Edge
      lhs.presXML = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr (Node_ParseErrList_Edge @self @lhs.path) @error
  | HoleList_Edge
      lhs.presXML = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Edge" (Node_HoleList_Edge @self @lhs.path) @lhs.path

SEM ConsList_Section
  | Cons_Section lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Section  lhs.pressXML  = []

SEM ConsList_Paragraph
  | Cons_Paragraph lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Paragraph  lhs.pressXML  = []

SEM ConsList_Subsection
  | Cons_Subsection lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Subsection  lhs.pressXML  = []

SEM ConsList_Subsubsection
  | Cons_Subsubsection lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Subsubsection  lhs.pressXML  = []

SEM ConsList_Word
  | Cons_Word lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Word  lhs.pressXML  = []

SEM ConsList_Vertex
  | Cons_Vertex lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Vertex  lhs.pressXML  = []

SEM ConsList_Edge
  | Cons_Edge lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Edge  lhs.pressXML  = []




--------------------------------------------------------------------------
-- Sem functions for tree presentation                                  --
--------------------------------------------------------------------------

SEM Root
  | Root
      lhs.presTree = presentElementTree @lhs.focusD (Node_Root @self @lhs.path) @lhs.path "Root" [ @graph.presTree, presentPrimXMLString @title, @sections.presTree ] 
  | HoleRoot     lhs.presTree = presHole @lhs.focusD "Root" (Node_HoleRoot @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presTree = presParseErr (Node_ParseErrRoot @self @lhs.path) @error

SEM Section
  | Section
      lhs.presTree = presentElementTree @lhs.focusD (Node_Section @self @lhs.path) @lhs.path "Section" [ presentPrimXMLString @title, @paragraphs.presTree, @subsections.presTree ] 
  | HoleSection     lhs.presTree = presHole @lhs.focusD "Section" (Node_HoleSection @self @lhs.path) @lhs.path
  | ParseErrSection lhs.presTree = presParseErr (Node_ParseErrSection @self @lhs.path) @error

SEM Subsection
  | Subsection
      lhs.presTree = presentElementTree @lhs.focusD (Node_Subsection @self @lhs.path) @lhs.path "Subsection" [ presentPrimXMLString @title, @paragraphs.presTree, @subsubsections.presTree ] 
  | HoleSubsection     lhs.presTree = presHole @lhs.focusD "Subsection" (Node_HoleSubsection @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.presTree = presParseErr (Node_ParseErrSubsection @self @lhs.path) @error

SEM Subsubsection
  | Subsubsection
      lhs.presTree = presentElementTree @lhs.focusD (Node_Subsubsection @self @lhs.path) @lhs.path "Subsubsection" [ presentPrimXMLString @title, @paragraphs.presTree ] 
  | HoleSubsubsection     lhs.presTree = presHole @lhs.focusD "Subsubsection" (Node_HoleSubsubsection @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.presTree = presParseErr (Node_ParseErrSubsubsection @self @lhs.path) @error

SEM Paragraph
  | Paragraph
      lhs.presTree = presentElementTree @lhs.focusD (Node_Paragraph @self @lhs.path) @lhs.path "Paragraph" [ @words.presTree ] 
  | SubgraphPara
      lhs.presTree = presentElementTree @lhs.focusD (Node_SubgraphPara @self @lhs.path) @lhs.path "SubgraphPara" [ @subgraph.presTree ] 
  | HoleParagraph     lhs.presTree = presHole @lhs.focusD "Paragraph" (Node_HoleParagraph @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.presTree = presParseErr (Node_ParseErrParagraph @self @lhs.path) @error

SEM Word
  | Word
      lhs.presTree = presentElementTree @lhs.focusD (Node_Word @self @lhs.path) @lhs.path "Word" [ presentPrimXMLString @word ] 
  | NodeRef
      lhs.presTree = presentElementTree @lhs.focusD (Node_NodeRef @self @lhs.path) @lhs.path "NodeRef" [ presentPrimXMLString @nodeName ] 
  | Label
      lhs.presTree = presentElementTree @lhs.focusD (Node_Label @self @lhs.path) @lhs.path "Label" [ presentPrimXMLString @label ] 
  | LabelRef
      lhs.presTree = presentElementTree @lhs.focusD (Node_LabelRef @self @lhs.path) @lhs.path "LabelRef" [ presentPrimXMLString @label ] 
  | HoleWord     lhs.presTree = presHole @lhs.focusD "Word" (Node_HoleWord @self @lhs.path) @lhs.path
  | ParseErrWord lhs.presTree = presParseErr (Node_ParseErrWord @self @lhs.path) @error

SEM Graph
  | Graph
      lhs.presTree = presentElementTree @lhs.focusD (Node_Graph @self @lhs.path) @lhs.path "Graph" [ @dirty.presTree, @vertices.presTree, @edges.presTree ] 
  | HoleGraph     lhs.presTree = presHole @lhs.focusD "Graph" (Node_HoleGraph @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.presTree = presParseErr (Node_ParseErrGraph @self @lhs.path) @error

SEM Vertex
  | Vertex
      lhs.presTree = presentElementTree @lhs.focusD (Node_Vertex @self @lhs.path) @lhs.path "Vertex" [ presentPrimXMLString @name, @shape.presTree, presentPrimXMLInt @id, presentPrimXMLInt @x, presentPrimXMLInt @y ] 
  | HoleVertex     lhs.presTree = presHole @lhs.focusD "Vertex" (Node_HoleVertex @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.presTree = presParseErr (Node_ParseErrVertex @self @lhs.path) @error

SEM Shape
  | Circle
      lhs.presTree = presentElementTree @lhs.focusD (Node_Circle @self @lhs.path) @lhs.path "Circle" [  ] 
  | Square
      lhs.presTree = presentElementTree @lhs.focusD (Node_Square @self @lhs.path) @lhs.path "Square" [  ] 
  | HoleShape     lhs.presTree = presHole @lhs.focusD "Shape" (Node_HoleShape @self @lhs.path) @lhs.path
  | ParseErrShape lhs.presTree = presParseErr (Node_ParseErrShape @self @lhs.path) @error

SEM Edge
  | Edge
      lhs.presTree = presentElementTree @lhs.focusD (Node_Edge @self @lhs.path) @lhs.path "Edge" [ presentPrimXMLInt @from, presentPrimXMLInt @to ] 
  | HoleEdge     lhs.presTree = presHole @lhs.focusD "Edge" (Node_HoleEdge @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.presTree = presParseErr (Node_ParseErrEdge @self @lhs.path) @error

SEM Subgraph
  | Subgraph
      lhs.presTree = presentElementTree @lhs.focusD (Node_Subgraph @self @lhs.path) @lhs.path "Subgraph" [ @dirty.presTree, @vertices.presTree, @edges.presTree ] 
  | HoleSubgraph     lhs.presTree = presHole @lhs.focusD "Subgraph" (Node_HoleSubgraph @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.presTree = presParseErr (Node_ParseErrSubgraph @self @lhs.path) @error

SEM Dirty
  | Dirty
      lhs.presTree = presentElementTree @lhs.focusD (Node_Dirty @self @lhs.path) @lhs.path "Dirty" [  ] 
  | Clean
      lhs.presTree = presentElementTree @lhs.focusD (Node_Clean @self @lhs.path) @lhs.path "Clean" [  ] 
  | HoleDirty     lhs.presTree = presHole @lhs.focusD "Dirty" (Node_HoleDirty @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.presTree = presParseErr (Node_ParseErrDirty @self @lhs.path) @error

SEM List_Section
  | List_Section
      lhs.presTree = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Section
      lhs.presTree = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Section @self @lhs.path) @error
  | HoleList_Section
      lhs.presTree = loc (Node_List_Section @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Section" (Node_HoleList_Section @self @lhs.path) @lhs.path

SEM List_Paragraph
  | List_Paragraph
      lhs.presTree = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Paragraph
      lhs.presTree = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Paragraph @self @lhs.path) @error
  | HoleList_Paragraph
      lhs.presTree = loc (Node_List_Paragraph @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Paragraph" (Node_HoleList_Paragraph @self @lhs.path) @lhs.path

SEM List_Subsection
  | List_Subsection
      lhs.presTree = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Subsection
      lhs.presTree = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Subsection @self @lhs.path) @error
  | HoleList_Subsection
      lhs.presTree = loc (Node_List_Subsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Subsection" (Node_HoleList_Subsection @self @lhs.path) @lhs.path

SEM List_Subsubsection
  | List_Subsubsection
      lhs.presTree = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Subsubsection
      lhs.presTree = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Subsubsection @self @lhs.path) @error
  | HoleList_Subsubsection
      lhs.presTree = loc (Node_List_Subsubsection @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Subsubsection" (Node_HoleList_Subsubsection @self @lhs.path) @lhs.path

SEM List_Word
  | List_Word
      lhs.presTree = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Word
      lhs.presTree = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Word @self @lhs.path) @error
  | HoleList_Word
      lhs.presTree = loc (Node_List_Word @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Word" (Node_HoleList_Word @self @lhs.path) @lhs.path

SEM List_Vertex
  | List_Vertex
      lhs.presTree = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Vertex
      lhs.presTree = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Vertex @self @lhs.path) @error
  | HoleList_Vertex
      lhs.presTree = loc (Node_List_Vertex @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Vertex" (Node_HoleList_Vertex @self @lhs.path) @lhs.path

SEM List_Edge
  | List_Edge
      lhs.presTree = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Edge
      lhs.presTree = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr (Node_ParseErrList_Edge @self @lhs.path) @error
  | HoleList_Edge
      lhs.presTree = loc (Node_List_Edge @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Edge" (Node_HoleList_Edge @self @lhs.path) @lhs.path

SEM ConsList_Section
  | Cons_Section lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Section  lhs.pressTree  = []

SEM ConsList_Paragraph
  | Cons_Paragraph lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Paragraph  lhs.pressTree  = []

SEM ConsList_Subsection
  | Cons_Subsection lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Subsection  lhs.pressTree  = []

SEM ConsList_Subsubsection
  | Cons_Subsubsection lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Subsubsection  lhs.pressTree  = []

SEM ConsList_Word
  | Cons_Word lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Word  lhs.pressTree  = []

SEM ConsList_Vertex
  | Cons_Vertex lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Vertex  lhs.pressTree  = []

SEM ConsList_Edge
  | Cons_Edge lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Edge  lhs.pressTree  = []



