
SEM EnrichedDoc
  | RootEnr root.path  = []
 
{
type Presentation_Doc_Node_Clip = Presentation Document Node ClipDoc

presentElementXML :: FocusDoc -> Node -> [Int] -> String -> [Presentation_Doc_Node_Clip] -> Presentation_Doc_Node_Clip
presentElementXML focusD node path tag children =
  loc node $ parsing $ presentFocus focusD path $                  
    if null children
    then col [ text $ "<"++tag++"/>"]
    else col [ text  $ "<"++tag++">"
             , row [ text "  ", col children ]
             , text $ "</"++tag++">" ]      
    
presentPrimXMLBool :: Bool -> Presentation_Doc_Node_Clip
presentPrimXMLBool x = text $ "<Bool>"++show x++"<Bool/>"

presentPrimXMLInt :: Int -> Presentation_Doc_Node_Clip
presentPrimXMLInt x = text $ "<Int>"++show x++"<Int/>"

presentPrimXMLString :: String -> Presentation_Doc_Node_Clip
presentPrimXMLString x = text $ "<String>"++x++"<String>"


presentElementTree :: FocusDoc -> Node -> [Int] -> String -> [Presentation_Doc_Node_Clip] -> Presentation_Doc_Node_Clip
presentElementTree focusD node path tag children =
  loc node $ parsing $ presentFocus focusD path $                  
    if null children
    then mkTreeLeaf False $ text $ tag
    else mkTreeNode False True (text tag) children
    
presentPrimTreeBool :: Bool -> Presentation_Doc_Node_Clip
presentPrimTreeBool x =  mkTreeLeaf False $ text $ "Bool: "++show x

presentPrimTreeInt :: Int -> Presentation_Doc_Node_Clip
presentPrimTreeInt x =  mkTreeLeaf False $ text $ "Int: "++show x

presentPrimTreeString :: String -> Presentation_Doc_Node_Clip
presentPrimTreeString x =  mkTreeLeaf False $ text $ "String: "++x



}                   

SEM EnrichedDoc
  | HoleEnrichedDoc     lhs.pres = presHole @lhs.focusD "EnrichedDoc" (HoleEnrichedDocNode @self []) []
  | ParseErrEnrichedDoc lhs.pres = presParseErr @presentation



SEM String_
  | String_
      lhs.pres = loc (String_Node @self @lhs.path) $ parsing' LexInherited $ presentFocus @lhs.focusD @lhs.path $
                   row [text @string]

SEM String_ [ | | length : Int str : String ]
  | String_ lhs.length = length @string
            lhs.str    = @string
  | ParseErrString_ HoleString_
            lhs.length = 0
            lhs.str    = ""

SEM Int_
  | Int_
      lhs.pres = loc (Int_Node @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                   row [text $ show @int, text ""] -- ? why this empty string?

SEM Int_ [ | | int : Int ]
  | Int_    lhs.int    = @int
  | ParseErrInt_ HoleInt_
            lhs.int    = 0

SEM Bool_
  | Bool_
      lhs.pres = loc (Bool_Node @self @lhs.path) $ parsing $ presentFocus @lhs.focusD @lhs.path $
                   row [text $ show @bool, text ""] -- ? why this empty string?

SEM Bool_ [ | | bool : Bool ]
  | Bool_    lhs.bool    = @bool
  | ParseErrBool_ HoleBool_
            lhs.bool    = False



----- GENERATED PART STARTS HERE. DO NOT EDIT ON OR BEYOND THIS LINE -----

{- ------------------------------------

 generated part

------------------------------------- -}


DATA EnrichedDoc | RootEnr id:IDD root:Root document:Document 
                 | HoleEnrichedDoc
                 | ParseErrEnrichedDoc presentation:Presentation_Doc_Node_Clip


DATA String_ | String_ idd:IDD string:String 
             | HoleString_
             | ParseErrString_ presentation:Presentation_Doc_Node_Clip


DATA Bool_ | Bool_ idd:IDD bool:Bool 
           | HoleBool_
           | ParseErrBool_ presentation:Presentation_Doc_Node_Clip


DATA Int_ | Int_ idd:IDD int:Int 
          | HoleInt_
          | ParseErrInt_ presentation:Presentation_Doc_Node_Clip


DATA Dummy | Dummy idd:IDD dummys:List_Dummy string_:String_ bool_:Bool_ int_:Int_ 
           | HoleDummy
           | ParseErrDummy presentation:Presentation_Doc_Node_Clip


DATA Root | Root idd:IDD graph:Graph title:String_ sections:List_Section 
          | HoleRoot
          | ParseErrRoot presentation:Presentation_Doc_Node_Clip


DATA Section | Section idd:IDD title:String_ paragraphs:List_Paragraph subsections:List_Subsection 
             | HoleSection
             | ParseErrSection presentation:Presentation_Doc_Node_Clip


DATA Subsection | Subsection idd:IDD title:String_ paragraphs:List_Paragraph subsubsections:List_Subsubsection 
                | HoleSubsection
                | ParseErrSubsection presentation:Presentation_Doc_Node_Clip


DATA Subsubsection | Subsubsection idd:IDD title:String_ paragraphs:List_Paragraph 
                   | HoleSubsubsection
                   | ParseErrSubsubsection presentation:Presentation_Doc_Node_Clip


DATA Paragraph | Paragraph idd:IDD words:List_Word 
               | SubgraphPara idd:IDD subgraph:Subgraph 
               | HoleParagraph
               | ParseErrParagraph presentation:Presentation_Doc_Node_Clip


DATA Word | Word idd:IDD word:String_ 
          | HoleWord
          | ParseErrWord presentation:Presentation_Doc_Node_Clip


DATA Graph | Graph idd:IDD dirty:Dirty vertices:List_Vertex edges:List_Edge 
           | HoleGraph
           | ParseErrGraph presentation:Presentation_Doc_Node_Clip


DATA Vertex | Vertex idd:IDD name:String_ shape:Shape id:Int_ x:Int_ y:Int_ 
            | HoleVertex
            | ParseErrVertex presentation:Presentation_Doc_Node_Clip


DATA Shape | Circle idd:IDD 
           | Square idd:IDD 
           | HoleShape
           | ParseErrShape presentation:Presentation_Doc_Node_Clip


DATA Edge | Edge idd:IDD from:Int_ to:Int_ 
          | HoleEdge
          | ParseErrEdge presentation:Presentation_Doc_Node_Clip


DATA Subgraph | Subgraph idd:IDD dirty:Dirty vertices:List_Vertex edges:List_Edge 
              | HoleSubgraph
              | ParseErrSubgraph presentation:Presentation_Doc_Node_Clip


DATA Dirty | Dirty idd:IDD 
           | Clean idd:IDD 
           | HoleDirty
           | ParseErrDirty presentation:Presentation_Doc_Node_Clip


DATA List_Dummy | List_Dummy idd:IDD elts:ConsList_Dummy 
                | HoleList_Dummy
                | ParseErrList_Dummy presentation:Presentation_Doc_Node_Clip


DATA ConsList_Dummy | Cons_Dummy head:Dummy tail:ConsList_Dummy 
                    | Nil_Dummy 


DATA List_Section | List_Section idd:IDD elts:ConsList_Section 
                  | HoleList_Section
                  | ParseErrList_Section presentation:Presentation_Doc_Node_Clip


DATA ConsList_Section | Cons_Section head:Section tail:ConsList_Section 
                      | Nil_Section 


DATA List_Paragraph | List_Paragraph idd:IDD elts:ConsList_Paragraph 
                    | HoleList_Paragraph
                    | ParseErrList_Paragraph presentation:Presentation_Doc_Node_Clip


DATA ConsList_Paragraph | Cons_Paragraph head:Paragraph tail:ConsList_Paragraph 
                        | Nil_Paragraph 


DATA List_Subsection | List_Subsection idd:IDD elts:ConsList_Subsection 
                     | HoleList_Subsection
                     | ParseErrList_Subsection presentation:Presentation_Doc_Node_Clip


DATA ConsList_Subsection | Cons_Subsection head:Subsection tail:ConsList_Subsection 
                         | Nil_Subsection 


DATA List_Subsubsection | List_Subsubsection idd:IDD elts:ConsList_Subsubsection 
                        | HoleList_Subsubsection
                        | ParseErrList_Subsubsection presentation:Presentation_Doc_Node_Clip


DATA ConsList_Subsubsection | Cons_Subsubsection head:Subsubsection tail:ConsList_Subsubsection 
                            | Nil_Subsubsection 


DATA List_Word | List_Word idd:IDD elts:ConsList_Word 
               | HoleList_Word
               | ParseErrList_Word presentation:Presentation_Doc_Node_Clip


DATA ConsList_Word | Cons_Word head:Word tail:ConsList_Word 
                   | Nil_Word 


DATA List_Vertex | List_Vertex idd:IDD elts:ConsList_Vertex 
                 | HoleList_Vertex
                 | ParseErrList_Vertex presentation:Presentation_Doc_Node_Clip


DATA ConsList_Vertex | Cons_Vertex head:Vertex tail:ConsList_Vertex 
                     | Nil_Vertex 


DATA List_Edge | List_Edge idd:IDD elts:ConsList_Edge 
               | HoleList_Edge
               | ParseErrList_Edge presentation:Presentation_Doc_Node_Clip


DATA ConsList_Edge | Cons_Edge head:Edge tail:ConsList_Edge 
                   | Nil_Edge 


SEM String_
  | HoleString_     lhs.pres = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.pres = presParseErr @presentation


SEM Bool_
  | HoleBool_     lhs.pres = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.pres = presParseErr @presentation


SEM Int_
  | HoleInt_     lhs.pres = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.pres = presParseErr @presentation


SEM Dummy
  | Dummy dummys.pIdC = @lhs.pIdC + 0
          int_.pIdC = @bool_.pIdC
          bool_.pIdC = @string_.pIdC
          string_.pIdC = @dummys.pIdC
          lhs.pIdC = @int_.pIdC
  | HoleDummy     lhs.pres = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.pres = presParseErr @presentation


SEM Dummy
  | Dummy dummys.path  = @lhs.path++[0]
          string_.path  = @lhs.path++[1]
          bool_.path  = @lhs.path++[2]
          int_.path  = @lhs.path++[3]


SEM Root
  | Root graph.pIdC = @lhs.pIdC + 0
         sections.pIdC = @title.pIdC
         title.pIdC = @graph.pIdC
         lhs.pIdC = @sections.pIdC
  | HoleRoot     lhs.pres = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.pres = presParseErr @presentation


SEM Root
  | Root graph.path  = @lhs.path++[0]
         title.path  = @lhs.path++[1]
         sections.path  = @lhs.path++[2]


SEM Section
  | Section title.pIdC = @lhs.pIdC + 0
            subsections.pIdC = @paragraphs.pIdC
            paragraphs.pIdC = @title.pIdC
            lhs.pIdC = @subsections.pIdC
  | HoleSection     lhs.pres = presHole @lhs.focusD "Section" (HoleSectionNode @self @lhs.path) @lhs.path
  | ParseErrSection lhs.pres = presParseErr @presentation


SEM Section
  | Section title.path  = @lhs.path++[0]
            paragraphs.path  = @lhs.path++[1]
            subsections.path  = @lhs.path++[2]


SEM Subsection
  | Subsection title.pIdC = @lhs.pIdC + 0
               subsubsections.pIdC = @paragraphs.pIdC
               paragraphs.pIdC = @title.pIdC
               lhs.pIdC = @subsubsections.pIdC
  | HoleSubsection     lhs.pres = presHole @lhs.focusD "Subsection" (HoleSubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.pres = presParseErr @presentation


SEM Subsection
  | Subsection title.path  = @lhs.path++[0]
               paragraphs.path  = @lhs.path++[1]
               subsubsections.path  = @lhs.path++[2]


SEM Subsubsection
  | Subsubsection title.pIdC = @lhs.pIdC + 0
                  paragraphs.pIdC = @title.pIdC
                  lhs.pIdC = @paragraphs.pIdC
  | HoleSubsubsection     lhs.pres = presHole @lhs.focusD "Subsubsection" (HoleSubsubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.pres = presParseErr @presentation


SEM Subsubsection
  | Subsubsection title.path  = @lhs.path++[0]
                  paragraphs.path  = @lhs.path++[1]


SEM Paragraph
  | Paragraph words.pIdC = @lhs.pIdC + 0
              lhs.pIdC = @words.pIdC
  | SubgraphPara subgraph.pIdC = @lhs.pIdC + 0
                 lhs.pIdC = @subgraph.pIdC
  | HoleParagraph     lhs.pres = presHole @lhs.focusD "Paragraph" (HoleParagraphNode @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.pres = presParseErr @presentation


SEM Paragraph
  | Paragraph words.path  = @lhs.path++[0]
  | SubgraphPara subgraph.path  = @lhs.path++[0]


SEM Word
  | Word word.pIdC = @lhs.pIdC + 0
         lhs.pIdC = @word.pIdC
  | HoleWord     lhs.pres = presHole @lhs.focusD "Word" (HoleWordNode @self @lhs.path) @lhs.path
  | ParseErrWord lhs.pres = presParseErr @presentation


SEM Word
  | Word word.path  = @lhs.path++[0]


SEM Graph
  | Graph dirty.pIdC = @lhs.pIdC + 0
          edges.pIdC = @vertices.pIdC
          vertices.pIdC = @dirty.pIdC
          lhs.pIdC = @edges.pIdC
  | HoleGraph     lhs.pres = presHole @lhs.focusD "Graph" (HoleGraphNode @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.pres = presParseErr @presentation


SEM Graph
  | Graph dirty.path  = @lhs.path++[0]
          vertices.path  = @lhs.path++[1]
          edges.path  = @lhs.path++[2]


SEM Vertex
  | Vertex name.pIdC = @lhs.pIdC + 0
           y.pIdC = @x.pIdC
           x.pIdC = @id.pIdC
           id.pIdC = @shape.pIdC
           shape.pIdC = @name.pIdC
           lhs.pIdC = @y.pIdC
  | HoleVertex     lhs.pres = presHole @lhs.focusD "Vertex" (HoleVertexNode @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.pres = presParseErr @presentation


SEM Vertex
  | Vertex name.path  = @lhs.path++[0]
           shape.path  = @lhs.path++[1]
           id.path  = @lhs.path++[2]
           x.path  = @lhs.path++[3]
           y.path  = @lhs.path++[4]


SEM Shape
  | HoleShape     lhs.pres = presHole @lhs.focusD "Shape" (HoleShapeNode @self @lhs.path) @lhs.path
  | ParseErrShape lhs.pres = presParseErr @presentation


SEM Edge
  | Edge from.pIdC = @lhs.pIdC + 0
         to.pIdC = @from.pIdC
         lhs.pIdC = @to.pIdC
  | HoleEdge     lhs.pres = presHole @lhs.focusD "Edge" (HoleEdgeNode @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.pres = presParseErr @presentation


SEM Edge
  | Edge from.path  = @lhs.path++[0]
         to.path  = @lhs.path++[1]


SEM Subgraph
  | Subgraph dirty.pIdC = @lhs.pIdC + 0
             edges.pIdC = @vertices.pIdC
             vertices.pIdC = @dirty.pIdC
             lhs.pIdC = @edges.pIdC
  | HoleSubgraph     lhs.pres = presHole @lhs.focusD "Subgraph" (HoleSubgraphNode @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.pres = presParseErr @presentation


SEM Subgraph
  | Subgraph dirty.path  = @lhs.path++[0]
             vertices.path  = @lhs.path++[1]
             edges.path  = @lhs.path++[2]


SEM Dirty
  | HoleDirty     lhs.pres = presHole @lhs.focusD "Dirty" (HoleDirtyNode @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.pres = presParseErr @presentation

SEM List_Dummy
  | List_Dummy
      lhs.press = map ( loc (List_DummyNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Dummy     lhs.press = []
  | ParseErrList_Dummy lhs.press = [ presParseErr @presentation ]

SEM ConsList_Dummy
  | Cons_Dummy head.path  = @lhs.path++[@lhs.ix]
              tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Dummy      lhs.press = []


SEM ConsList_Dummy [ ix : Int | | ]
  | Cons_Dummy     tail.ix  = @lhs.ix + 1

SEM List_Section
  | List_Section
      lhs.press = map ( loc (List_SectionNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Section     lhs.press = []
  | ParseErrList_Section lhs.press = [ presParseErr @presentation ]

SEM ConsList_Section
  | Cons_Section head.path  = @lhs.path++[@lhs.ix]
                tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Section      lhs.press = []


SEM ConsList_Section [ ix : Int | | ]
  | Cons_Section     tail.ix  = @lhs.ix + 1

SEM List_Paragraph
  | List_Paragraph
      lhs.press = map ( loc (List_ParagraphNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Paragraph     lhs.press = []
  | ParseErrList_Paragraph lhs.press = [ presParseErr @presentation ]

SEM ConsList_Paragraph
  | Cons_Paragraph head.path  = @lhs.path++[@lhs.ix]
                  tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Paragraph      lhs.press = []


SEM ConsList_Paragraph [ ix : Int | | ]
  | Cons_Paragraph     tail.ix  = @lhs.ix + 1

SEM List_Subsection
  | List_Subsection
      lhs.press = map ( loc (List_SubsectionNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Subsection     lhs.press = []
  | ParseErrList_Subsection lhs.press = [ presParseErr @presentation ]

SEM ConsList_Subsection
  | Cons_Subsection head.path  = @lhs.path++[@lhs.ix]
                   tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Subsection      lhs.press = []


SEM ConsList_Subsection [ ix : Int | | ]
  | Cons_Subsection     tail.ix  = @lhs.ix + 1

SEM List_Subsubsection
  | List_Subsubsection
      lhs.press = map ( loc (List_SubsubsectionNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Subsubsection     lhs.press = []
  | ParseErrList_Subsubsection lhs.press = [ presParseErr @presentation ]

SEM ConsList_Subsubsection
  | Cons_Subsubsection head.path  = @lhs.path++[@lhs.ix]
                      tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Subsubsection      lhs.press = []


SEM ConsList_Subsubsection [ ix : Int | | ]
  | Cons_Subsubsection     tail.ix  = @lhs.ix + 1

SEM List_Word
  | List_Word
      lhs.press = map ( loc (List_WordNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Word     lhs.press = []
  | ParseErrList_Word lhs.press = [ presParseErr @presentation ]

SEM ConsList_Word
  | Cons_Word head.path  = @lhs.path++[@lhs.ix]
             tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Word      lhs.press = []


SEM ConsList_Word [ ix : Int | | ]
  | Cons_Word     tail.ix  = @lhs.ix + 1

SEM List_Vertex
  | List_Vertex
      lhs.press = map ( loc (List_VertexNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Vertex     lhs.press = []
  | ParseErrList_Vertex lhs.press = [ presParseErr @presentation ]

SEM ConsList_Vertex
  | Cons_Vertex head.path  = @lhs.path++[@lhs.ix]
               tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Vertex      lhs.press = []


SEM ConsList_Vertex [ ix : Int | | ]
  | Cons_Vertex     tail.ix  = @lhs.ix + 1

SEM List_Edge
  | List_Edge
      lhs.press = map ( loc (List_EdgeNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Edge     lhs.press = []
  | ParseErrList_Edge lhs.press = [ presParseErr @presentation ]

SEM ConsList_Edge
  | Cons_Edge head.path  = @lhs.path++[@lhs.ix]
             tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Edge      lhs.press = []


SEM ConsList_Edge [ ix : Int | | ]
  | Cons_Edge     tail.ix  = @lhs.ix + 1


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty List_Dummy ConsList_Dummy List_Section ConsList_Section List_Paragraph ConsList_Paragraph List_Subsection ConsList_Subsection List_Subsubsection ConsList_Subsubsection List_Word ConsList_Word List_Vertex ConsList_Vertex List_Edge ConsList_Edge
       [ |  pIdC : Int  | ]


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty List_Dummy ConsList_Dummy List_Section ConsList_Section List_Paragraph ConsList_Paragraph List_Subsection ConsList_Subsection List_Subsubsection ConsList_Subsubsection List_Word ConsList_Word List_Vertex ConsList_Vertex List_Edge ConsList_Edge
       [ focusD : FocusDoc | | ]


ATTR  String_ Bool_ Int_ Dummy Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty List_Dummy ConsList_Dummy List_Section ConsList_Section List_Paragraph ConsList_Paragraph List_Subsection ConsList_Subsection List_Subsubsection ConsList_Subsubsection List_Word ConsList_Word List_Vertex ConsList_Vertex List_Edge ConsList_Edge
       [ | path : {[Int]} | ]


ATTR  List_Dummy ConsList_Dummy List_Section ConsList_Section List_Paragraph ConsList_Paragraph List_Subsection ConsList_Subsection List_Subsubsection ConsList_Subsubsection List_Word ConsList_Word List_Vertex ConsList_Vertex List_Edge ConsList_Edge [ | | press : {[Presentation_Doc_Node_Clip]} ]


ATTR  EnrichedDoc String_ Bool_ Int_ Dummy Root Section Subsection Subsubsection Paragraph Word Graph Vertex Shape Edge Subgraph Dirty [ | | pres : Presentation_Doc_Node_Clip ]


ATTR  Dummy Section Paragraph Subsection Subsubsection Word Vertex Edge [ ix : Int || ]



-- Default XML presentation

SEM String_ [ || presXML : Presentation_Doc_Node_Clip ]
  | String_
      lhs.presXML = presentElementXML @lhs.focusD (String_Node @self @lhs.path) @lhs.path "String_" [ presentPrimXMLString @string ] 
  | HoleString_     lhs.presXML = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.presXML = presParseErr @presentation

SEM Bool_ [ || presXML : Presentation_Doc_Node_Clip ]
  | Bool_
      lhs.presXML = presentElementXML @lhs.focusD (Bool_Node @self @lhs.path) @lhs.path "Bool_" [ presentPrimXMLBool @bool ] 
  | HoleBool_     lhs.presXML = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.presXML = presParseErr @presentation

SEM Int_ [ || presXML : Presentation_Doc_Node_Clip ]
  | Int_
      lhs.presXML = presentElementXML @lhs.focusD (Int_Node @self @lhs.path) @lhs.path "Int_" [ presentPrimXMLInt @int ] 
  | HoleInt_     lhs.presXML = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.presXML = presParseErr @presentation

SEM Dummy [ || presXML : Presentation_Doc_Node_Clip ]
  | Dummy
      lhs.presXML = presentElementXML @lhs.focusD (DummyNode @self @lhs.path) @lhs.path "Dummy" [ @dummys.presXML, @string_.presXML, @bool_.presXML, @int_.presXML ] 
  | HoleDummy     lhs.presXML = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.presXML = presParseErr @presentation

SEM Root [ || presXML : Presentation_Doc_Node_Clip ]
  | Root
      lhs.presXML = presentElementXML @lhs.focusD (RootNode @self @lhs.path) @lhs.path "Root" [ @graph.presXML, @title.presXML, @sections.presXML ] 
  | HoleRoot     lhs.presXML = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presXML = presParseErr @presentation

SEM Section [ || presXML : Presentation_Doc_Node_Clip ]
  | Section
      lhs.presXML = presentElementXML @lhs.focusD (SectionNode @self @lhs.path) @lhs.path "Section" [ @title.presXML, @paragraphs.presXML, @subsections.presXML ] 
  | HoleSection     lhs.presXML = presHole @lhs.focusD "Section" (HoleSectionNode @self @lhs.path) @lhs.path
  | ParseErrSection lhs.presXML = presParseErr @presentation

SEM Subsection [ || presXML : Presentation_Doc_Node_Clip ]
  | Subsection
      lhs.presXML = presentElementXML @lhs.focusD (SubsectionNode @self @lhs.path) @lhs.path "Subsection" [ @title.presXML, @paragraphs.presXML, @subsubsections.presXML ] 
  | HoleSubsection     lhs.presXML = presHole @lhs.focusD "Subsection" (HoleSubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.presXML = presParseErr @presentation

SEM Subsubsection [ || presXML : Presentation_Doc_Node_Clip ]
  | Subsubsection
      lhs.presXML = presentElementXML @lhs.focusD (SubsubsectionNode @self @lhs.path) @lhs.path "Subsubsection" [ @title.presXML, @paragraphs.presXML ] 
  | HoleSubsubsection     lhs.presXML = presHole @lhs.focusD "Subsubsection" (HoleSubsubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.presXML = presParseErr @presentation

SEM Paragraph [ || presXML : Presentation_Doc_Node_Clip ]
  | Paragraph
      lhs.presXML = presentElementXML @lhs.focusD (ParagraphNode @self @lhs.path) @lhs.path "Paragraph" [ @words.presXML ] 
  | SubgraphPara
      lhs.presXML = presentElementXML @lhs.focusD (SubgraphParaNode @self @lhs.path) @lhs.path "SubgraphPara" [ @subgraph.presXML ] 
  | HoleParagraph     lhs.presXML = presHole @lhs.focusD "Paragraph" (HoleParagraphNode @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.presXML = presParseErr @presentation

SEM Word [ || presXML : Presentation_Doc_Node_Clip ]
  | Word
      lhs.presXML = presentElementXML @lhs.focusD (WordNode @self @lhs.path) @lhs.path "Word" [ @word.presXML ] 
  | HoleWord     lhs.presXML = presHole @lhs.focusD "Word" (HoleWordNode @self @lhs.path) @lhs.path
  | ParseErrWord lhs.presXML = presParseErr @presentation

SEM Graph [ || presXML : Presentation_Doc_Node_Clip ]
  | Graph
      lhs.presXML = presentElementXML @lhs.focusD (GraphNode @self @lhs.path) @lhs.path "Graph" [ @dirty.presXML, @vertices.presXML, @edges.presXML ] 
  | HoleGraph     lhs.presXML = presHole @lhs.focusD "Graph" (HoleGraphNode @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.presXML = presParseErr @presentation

SEM Vertex [ || presXML : Presentation_Doc_Node_Clip ]
  | Vertex
      lhs.presXML = presentElementXML @lhs.focusD (VertexNode @self @lhs.path) @lhs.path "Vertex" [ @name.presXML, @shape.presXML, @id.presXML, @x.presXML, @y.presXML ] 
  | HoleVertex     lhs.presXML = presHole @lhs.focusD "Vertex" (HoleVertexNode @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.presXML = presParseErr @presentation

SEM Shape [ || presXML : Presentation_Doc_Node_Clip ]
  | Circle
      lhs.presXML = presentElementXML @lhs.focusD (CircleNode @self @lhs.path) @lhs.path "Circle" [  ] 
  | Square
      lhs.presXML = presentElementXML @lhs.focusD (SquareNode @self @lhs.path) @lhs.path "Square" [  ] 
  | HoleShape     lhs.presXML = presHole @lhs.focusD "Shape" (HoleShapeNode @self @lhs.path) @lhs.path
  | ParseErrShape lhs.presXML = presParseErr @presentation

SEM Edge [ || presXML : Presentation_Doc_Node_Clip ]
  | Edge
      lhs.presXML = presentElementXML @lhs.focusD (EdgeNode @self @lhs.path) @lhs.path "Edge" [ @from.presXML, @to.presXML ] 
  | HoleEdge     lhs.presXML = presHole @lhs.focusD "Edge" (HoleEdgeNode @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.presXML = presParseErr @presentation

SEM Subgraph [ || presXML : Presentation_Doc_Node_Clip ]
  | Subgraph
      lhs.presXML = presentElementXML @lhs.focusD (SubgraphNode @self @lhs.path) @lhs.path "Subgraph" [ @dirty.presXML, @vertices.presXML, @edges.presXML ] 
  | HoleSubgraph     lhs.presXML = presHole @lhs.focusD "Subgraph" (HoleSubgraphNode @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.presXML = presParseErr @presentation

SEM Dirty [ || presXML : Presentation_Doc_Node_Clip ]
  | Dirty
      lhs.presXML = presentElementXML @lhs.focusD (DirtyNode @self @lhs.path) @lhs.path "Dirty" [  ] 
  | Clean
      lhs.presXML = presentElementXML @lhs.focusD (CleanNode @self @lhs.path) @lhs.path "Clean" [  ] 
  | HoleDirty     lhs.presXML = presHole @lhs.focusD "Dirty" (HoleDirtyNode @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.presXML = presParseErr @presentation

SEM List_Dummy [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Dummy
      lhs.presXML = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Dummy" (HoleList_DummyNode @self @lhs.path) @lhs.path

SEM ConsList_Dummy [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Dummy     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Dummy      lhs.pressXML  = []

SEM List_Section [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Section
      lhs.presXML = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Section
      lhs.presXML = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Section
      lhs.presXML = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Section" (HoleList_SectionNode @self @lhs.path) @lhs.path

SEM ConsList_Section [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Section     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Section      lhs.pressXML  = []

SEM List_Paragraph [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Paragraph
      lhs.presXML = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Paragraph
      lhs.presXML = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Paragraph
      lhs.presXML = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Paragraph" (HoleList_ParagraphNode @self @lhs.path) @lhs.path

SEM ConsList_Paragraph [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Paragraph     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Paragraph      lhs.pressXML  = []

SEM List_Subsection [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Subsection
      lhs.presXML = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Subsection
      lhs.presXML = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Subsection
      lhs.presXML = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Subsection" (HoleList_SubsectionNode @self @lhs.path) @lhs.path

SEM ConsList_Subsection [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Subsection     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Subsection      lhs.pressXML  = []

SEM List_Subsubsection [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Subsubsection
      lhs.presXML = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Subsubsection
      lhs.presXML = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Subsubsection
      lhs.presXML = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Subsubsection" (HoleList_SubsubsectionNode @self @lhs.path) @lhs.path

SEM ConsList_Subsubsection [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Subsubsection     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Subsubsection      lhs.pressXML  = []

SEM List_Word [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Word
      lhs.presXML = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Word
      lhs.presXML = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Word
      lhs.presXML = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Word" (HoleList_WordNode @self @lhs.path) @lhs.path

SEM ConsList_Word [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Word     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Word      lhs.pressXML  = []

SEM List_Vertex [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Vertex
      lhs.presXML = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Vertex
      lhs.presXML = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Vertex
      lhs.presXML = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Vertex" (HoleList_VertexNode @self @lhs.path) @lhs.path

SEM ConsList_Vertex [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Vertex     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Vertex      lhs.pressXML  = []

SEM List_Edge [ || presXML : Presentation_Doc_Node_Clip ]
  | List_Edge
      lhs.presXML = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    col @elts.pressXML
  | ParseErrList_Edge
      lhs.presXML = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presParseErr @presentation
  | HoleList_Edge
      lhs.presXML = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                    presHole @lhs.focusD "List_Edge" (HoleList_EdgeNode @self @lhs.path) @lhs.path

SEM ConsList_Edge [ | | pressXML : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Edge     lhs.pressXML  = @head.presXML : @tail.pressXML
  | Nil_Edge      lhs.pressXML  = []




-- Default Tree presentation

SEM String_ [ || presTree : Presentation_Doc_Node_Clip ]
  | String_
      lhs.presTree = presentElementTree @lhs.focusD (String_Node @self @lhs.path) @lhs.path "String_" [ presentPrimTreeString @string ] 
  | HoleString_     lhs.presTree = presHole @lhs.focusD "String_" (HoleString_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.presTree = presParseErr @presentation

SEM Bool_ [ || presTree : Presentation_Doc_Node_Clip ]
  | Bool_
      lhs.presTree = presentElementTree @lhs.focusD (Bool_Node @self @lhs.path) @lhs.path "Bool_" [ presentPrimTreeBool @bool ] 
  | HoleBool_     lhs.presTree = presHole @lhs.focusD "Bool_" (HoleBool_Node @self @lhs.path) @lhs.path
  | ParseErrBool_ lhs.presTree = presParseErr @presentation

SEM Int_ [ || presTree : Presentation_Doc_Node_Clip ]
  | Int_
      lhs.presTree = presentElementTree @lhs.focusD (Int_Node @self @lhs.path) @lhs.path "Int_" [ presentPrimTreeInt @int ] 
  | HoleInt_     lhs.presTree = presHole @lhs.focusD "Int_" (HoleInt_Node @self @lhs.path) @lhs.path
  | ParseErrInt_ lhs.presTree = presParseErr @presentation

SEM Dummy [ || presTree : Presentation_Doc_Node_Clip ]
  | Dummy
      lhs.presTree = presentElementTree @lhs.focusD (DummyNode @self @lhs.path) @lhs.path "Dummy" [ @dummys.presTree, @string_.presTree, @bool_.presTree, @int_.presTree ] 
  | HoleDummy     lhs.presTree = presHole @lhs.focusD "Dummy" (HoleDummyNode @self @lhs.path) @lhs.path
  | ParseErrDummy lhs.presTree = presParseErr @presentation

SEM Root [ || presTree : Presentation_Doc_Node_Clip ]
  | Root
      lhs.presTree = presentElementTree @lhs.focusD (RootNode @self @lhs.path) @lhs.path "Root" [ @graph.presTree, @title.presTree, @sections.presTree ] 
  | HoleRoot     lhs.presTree = presHole @lhs.focusD "Root" (HoleRootNode @self @lhs.path) @lhs.path
  | ParseErrRoot lhs.presTree = presParseErr @presentation

SEM Section [ || presTree : Presentation_Doc_Node_Clip ]
  | Section
      lhs.presTree = presentElementTree @lhs.focusD (SectionNode @self @lhs.path) @lhs.path "Section" [ @title.presTree, @paragraphs.presTree, @subsections.presTree ] 
  | HoleSection     lhs.presTree = presHole @lhs.focusD "Section" (HoleSectionNode @self @lhs.path) @lhs.path
  | ParseErrSection lhs.presTree = presParseErr @presentation

SEM Subsection [ || presTree : Presentation_Doc_Node_Clip ]
  | Subsection
      lhs.presTree = presentElementTree @lhs.focusD (SubsectionNode @self @lhs.path) @lhs.path "Subsection" [ @title.presTree, @paragraphs.presTree, @subsubsections.presTree ] 
  | HoleSubsection     lhs.presTree = presHole @lhs.focusD "Subsection" (HoleSubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsection lhs.presTree = presParseErr @presentation

SEM Subsubsection [ || presTree : Presentation_Doc_Node_Clip ]
  | Subsubsection
      lhs.presTree = presentElementTree @lhs.focusD (SubsubsectionNode @self @lhs.path) @lhs.path "Subsubsection" [ @title.presTree, @paragraphs.presTree ] 
  | HoleSubsubsection     lhs.presTree = presHole @lhs.focusD "Subsubsection" (HoleSubsubsectionNode @self @lhs.path) @lhs.path
  | ParseErrSubsubsection lhs.presTree = presParseErr @presentation

SEM Paragraph [ || presTree : Presentation_Doc_Node_Clip ]
  | Paragraph
      lhs.presTree = presentElementTree @lhs.focusD (ParagraphNode @self @lhs.path) @lhs.path "Paragraph" [ @words.presTree ] 
  | SubgraphPara
      lhs.presTree = presentElementTree @lhs.focusD (SubgraphParaNode @self @lhs.path) @lhs.path "SubgraphPara" [ @subgraph.presTree ] 
  | HoleParagraph     lhs.presTree = presHole @lhs.focusD "Paragraph" (HoleParagraphNode @self @lhs.path) @lhs.path
  | ParseErrParagraph lhs.presTree = presParseErr @presentation

SEM Word [ || presTree : Presentation_Doc_Node_Clip ]
  | Word
      lhs.presTree = presentElementTree @lhs.focusD (WordNode @self @lhs.path) @lhs.path "Word" [ @word.presTree ] 
  | HoleWord     lhs.presTree = presHole @lhs.focusD "Word" (HoleWordNode @self @lhs.path) @lhs.path
  | ParseErrWord lhs.presTree = presParseErr @presentation

SEM Graph [ || presTree : Presentation_Doc_Node_Clip ]
  | Graph
      lhs.presTree = presentElementTree @lhs.focusD (GraphNode @self @lhs.path) @lhs.path "Graph" [ @dirty.presTree, @vertices.presTree, @edges.presTree ] 
  | HoleGraph     lhs.presTree = presHole @lhs.focusD "Graph" (HoleGraphNode @self @lhs.path) @lhs.path
  | ParseErrGraph lhs.presTree = presParseErr @presentation

SEM Vertex [ || presTree : Presentation_Doc_Node_Clip ]
  | Vertex
      lhs.presTree = presentElementTree @lhs.focusD (VertexNode @self @lhs.path) @lhs.path "Vertex" [ @name.presTree, @shape.presTree, @id.presTree, @x.presTree, @y.presTree ] 
  | HoleVertex     lhs.presTree = presHole @lhs.focusD "Vertex" (HoleVertexNode @self @lhs.path) @lhs.path
  | ParseErrVertex lhs.presTree = presParseErr @presentation

SEM Shape [ || presTree : Presentation_Doc_Node_Clip ]
  | Circle
      lhs.presTree = presentElementTree @lhs.focusD (CircleNode @self @lhs.path) @lhs.path "Circle" [  ] 
  | Square
      lhs.presTree = presentElementTree @lhs.focusD (SquareNode @self @lhs.path) @lhs.path "Square" [  ] 
  | HoleShape     lhs.presTree = presHole @lhs.focusD "Shape" (HoleShapeNode @self @lhs.path) @lhs.path
  | ParseErrShape lhs.presTree = presParseErr @presentation

SEM Edge [ || presTree : Presentation_Doc_Node_Clip ]
  | Edge
      lhs.presTree = presentElementTree @lhs.focusD (EdgeNode @self @lhs.path) @lhs.path "Edge" [ @from.presTree, @to.presTree ] 
  | HoleEdge     lhs.presTree = presHole @lhs.focusD "Edge" (HoleEdgeNode @self @lhs.path) @lhs.path
  | ParseErrEdge lhs.presTree = presParseErr @presentation

SEM Subgraph [ || presTree : Presentation_Doc_Node_Clip ]
  | Subgraph
      lhs.presTree = presentElementTree @lhs.focusD (SubgraphNode @self @lhs.path) @lhs.path "Subgraph" [ @dirty.presTree, @vertices.presTree, @edges.presTree ] 
  | HoleSubgraph     lhs.presTree = presHole @lhs.focusD "Subgraph" (HoleSubgraphNode @self @lhs.path) @lhs.path
  | ParseErrSubgraph lhs.presTree = presParseErr @presentation

SEM Dirty [ || presTree : Presentation_Doc_Node_Clip ]
  | Dirty
      lhs.presTree = presentElementTree @lhs.focusD (DirtyNode @self @lhs.path) @lhs.path "Dirty" [  ] 
  | Clean
      lhs.presTree = presentElementTree @lhs.focusD (CleanNode @self @lhs.path) @lhs.path "Clean" [  ] 
  | HoleDirty     lhs.presTree = presHole @lhs.focusD "Dirty" (HoleDirtyNode @self @lhs.path) @lhs.path
  | ParseErrDirty lhs.presTree = presParseErr @presentation

SEM List_Dummy [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Dummy
      lhs.presTree = loc (List_DummyNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Dummy" (HoleList_DummyNode @self @lhs.path) @lhs.path

SEM ConsList_Dummy [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Dummy     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Dummy      lhs.pressTree  = []

SEM List_Section [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Section
      lhs.presTree = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Section
      lhs.presTree = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Section
      lhs.presTree = loc (List_SectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Section" (HoleList_SectionNode @self @lhs.path) @lhs.path

SEM ConsList_Section [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Section     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Section      lhs.pressTree  = []

SEM List_Paragraph [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Paragraph
      lhs.presTree = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Paragraph
      lhs.presTree = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Paragraph
      lhs.presTree = loc (List_ParagraphNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Paragraph" (HoleList_ParagraphNode @self @lhs.path) @lhs.path

SEM ConsList_Paragraph [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Paragraph     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Paragraph      lhs.pressTree  = []

SEM List_Subsection [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Subsection
      lhs.presTree = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Subsection
      lhs.presTree = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Subsection
      lhs.presTree = loc (List_SubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Subsection" (HoleList_SubsectionNode @self @lhs.path) @lhs.path

SEM ConsList_Subsection [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Subsection     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Subsection      lhs.pressTree  = []

SEM List_Subsubsection [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Subsubsection
      lhs.presTree = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Subsubsection
      lhs.presTree = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Subsubsection
      lhs.presTree = loc (List_SubsubsectionNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Subsubsection" (HoleList_SubsubsectionNode @self @lhs.path) @lhs.path

SEM ConsList_Subsubsection [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Subsubsection     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Subsubsection      lhs.pressTree  = []

SEM List_Word [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Word
      lhs.presTree = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Word
      lhs.presTree = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Word
      lhs.presTree = loc (List_WordNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Word" (HoleList_WordNode @self @lhs.path) @lhs.path

SEM ConsList_Word [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Word     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Word      lhs.pressTree  = []

SEM List_Vertex [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Vertex
      lhs.presTree = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Vertex
      lhs.presTree = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Vertex
      lhs.presTree = loc (List_VertexNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Vertex" (HoleList_VertexNode @self @lhs.path) @lhs.path

SEM ConsList_Vertex [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Vertex     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Vertex      lhs.pressTree  = []

SEM List_Edge [ || presTree : Presentation_Doc_Node_Clip ]
  | List_Edge
      lhs.presTree = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       col @elts.pressTree
  | ParseErrList_Edge
      lhs.presTree = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presParseErr @presentation
  | HoleList_Edge
      lhs.presTree = loc (List_EdgeNode @self @lhs.path) $ structural $ presentFocus @lhs.focusD @lhs.path $
                       presHole @lhs.focusD "List_Edge" (HoleList_EdgeNode @self @lhs.path) @lhs.path

SEM ConsList_Edge [ | | pressTree : {[Presentation_Doc_Node_Clip]} ]
  | Cons_Edge     lhs.pressTree  = @head.presTree : @tail.pressTree
  | Nil_Edge      lhs.pressTree  = []

