
--ATTR Document HeliumTypeInfo [ path : {[Int]} |  pIdC : Int  | ]

--DATA Document | RootDoc IDD IDP Decls

--DATA HeliumTypeInfo | HeliumTypeInfo

--Document = 
--              | HoleDoc
--              | ParseErrDoc Node Presentation deriving Show


--type HeliumTypeInfo = ([HeliumMessage],[(String,String)], [(PathDoc, String)])




SEM EnrichedDoc
  | RootEnr idListDecls.pIdC = @lhs.pIdC + 4
            decls.pIdC = @idListDecls.pIdC
            lhs.pIdC = @decls.pIdC
  | HoleEnrichedDoc     lhs.pres = presHole @lhs.focusD "EnrichedDoc" (EnrichedDocNode @self []) []
  | ParseErrEnrichedDoc lhs.pres = presParseErr @node @presentation


SEM EnrichedDoc
  | RootEnr idListDecls.path  = []
            decls.path  = []




-- don't edit this line or below !!!

{- ------------------------------------

 generated part

------------------------------------- -}


DATA EnrichedDoc | RootEnr id:IDD idP:IDP idListDecls:List_Decl decls:List_Decl heliumTypeInfo:HeliumTypeInfo document:Document 
                 | HoleEnrichedDoc
                 | ParseErrEnrichedDoc Node Presentation


DATA Decl | Decl idD:IDD idP0:IDP idP1:IDP idP2:IDP idP3:IDP expanded:Bool autoLayout:Bool ident:Ident exp:Exp 
          | BoardDecl idD:IDD idP0:IDP idP1:IDP board:Board 
          | PPPresentationDecl idD:IDD idP0:IDP idP1:IDP pPPresentation:PPPresentation 
          | HoleDecl
          | ParseErrDecl Node Presentation


DATA Ident | Ident idD:IDD idP0:IDP idP1:IDP string:String 
           | HoleIdent
           | ParseErrIdent Node Presentation


DATA Exp | PlusExp idD:IDD idP0:IDP exp1:Exp exp2:Exp 
         | TimesExp idD:IDD idP0:IDP exp1:Exp exp2:Exp 
         | DivExp idD:IDD idP0:IDP exp1:Exp exp2:Exp 
         | PowerExp idD:IDD idP0:IDP exp1:Exp exp2:Exp 
         | BoolExp idD:IDD idP0:IDP bool:Bool 
         | IntExp idD:IDD idP0:IDP int:Int 
         | LamExp idD:IDD idP0:IDP idP1:IDP ident:Ident exp:Exp 
         | AppExp idD:IDD exp1:Exp exp2:Exp 
         | CaseExp idD:IDD idP0:IDP idP1:IDP exp:Exp alts:List_Alt 
         | LetExp idD:IDD idP0:IDP idP1:IDP decls:List_Decl exp:Exp 
         | IdentExp idd:IDD ident:Ident 
         | IfExp idD:IDD idP0:IDP idP1:IDP idP2:IDP exp1:Exp exp2:Exp exp3:Exp 
         | ParenExp idD:IDD idP0:IDP idP1:IDP exp:Exp 
         | ListExp idD:IDD idP0:IDP idP1:IDP ids:{[IDP]} exps:List_Exp 
         | ProductExp idD:IDD idP0:IDP idP1:IDP ids:{[IDP]} exps:List_Exp 
         | HoleExp
         | ParseErrExp Node Presentation


DATA Alt | Alt idD:IDD idP0:IDP idP1:IDP ident:Ident exp:Exp 
         | HoleAlt
         | ParseErrAlt Node Presentation


DATA Board | Board idD:IDD r1:BoardRow r2:BoardRow r3:BoardRow r4:BoardRow r5:BoardRow r6:BoardRow r7:BoardRow r8:BoardRow 
           | HoleBoard
           | ParseErrBoard Node Presentation


DATA BoardRow | BoardRow idD:IDD ca:BoardSquare cb:BoardSquare cc:BoardSquare cd:BoardSquare ce:BoardSquare cf:BoardSquare cg:BoardSquare ch:BoardSquare 
              | HoleBoardRow
              | ParseErrBoardRow Node Presentation


DATA BoardSquare | Queen idD:IDD color:Bool 
                 | King idD:IDD color:Bool 
                 | Bishop idD:IDD color:Bool 
                 | Knight idD:IDD color:Bool 
                 | Rook idD:IDD color:Bool 
                 | Pawn idD:IDD color:Bool 
                 | Empty 
                 | HoleBoardSquare
                 | ParseErrBoardSquare Node Presentation


DATA PPPresentation | PPPresentation idd:IDD viewType:Bool slides:List_Slide 
                    | HolePPPresentation
                    | ParseErrPPPresentation Node Presentation


DATA Slide | Slide idd:IDD title:String_ itemList:ItemList 
           | HoleSlide
           | ParseErrSlide Node Presentation


DATA ItemList | ItemList idd:IDD listType:ListType items:List_Item 
              | HoleItemList
              | ParseErrItemList Node Presentation


DATA ListType | Bullet idd:IDD 
              | Number idd:IDD 
              | Alpha idd:IDD 
              | HoleListType
              | ParseErrListType Node Presentation


DATA Item | StringItem idd:IDD string:String_ 
          | HeliumItem idd:IDD exp:Exp 
          | ListItem idd:IDD itemList:ItemList 
          | HoleItem
          | ParseErrItem Node Presentation


DATA String_ | String_ idd:IDD string:String 
             | HoleString_
             | ParseErrString_ Node Presentation


DATA List_Decl | List_Decl idd:IDD elts:ConsList_Decl 
               | HoleList_Decl
               | ParseErrList_Decl Node Presentation


DATA ConsList_Decl | Cons_Decl head:Decl tail:ConsList_Decl 
                   | Nil_Decl 


DATA List_Alt | List_Alt idd:IDD elts:ConsList_Alt 
              | HoleList_Alt
              | ParseErrList_Alt Node Presentation


DATA ConsList_Alt | Cons_Alt head:Alt tail:ConsList_Alt 
                  | Nil_Alt 


DATA List_Exp | List_Exp idd:IDD elts:ConsList_Exp 
              | HoleList_Exp
              | ParseErrList_Exp Node Presentation


DATA ConsList_Exp | Cons_Exp head:Exp tail:ConsList_Exp 
                  | Nil_Exp 


DATA List_Slide | List_Slide idd:IDD elts:ConsList_Slide 
                | HoleList_Slide
                | ParseErrList_Slide Node Presentation


DATA ConsList_Slide | Cons_Slide head:Slide tail:ConsList_Slide 
                    | Nil_Slide 


DATA List_Item | List_Item idd:IDD elts:ConsList_Item 
               | HoleList_Item
               | ParseErrList_Item Node Presentation


DATA ConsList_Item | Cons_Item head:Item tail:ConsList_Item 
                   | Nil_Item 


SEM Decl
  | Decl ident.pIdC = @lhs.pIdC + 4
         exp.pIdC = @ident.pIdC
         lhs.pIdC = @exp.pIdC
  | BoardDecl board.pIdC = @lhs.pIdC + 2
              lhs.pIdC = @board.pIdC
  | PPPresentationDecl pPPresentation.pIdC = @lhs.pIdC + 2
                       lhs.pIdC = @pPPresentation.pIdC
  | HoleDecl     lhs.pres = presHole @lhs.focusD "Decl" (DeclNode @self @lhs.path) @lhs.path
  | ParseErrDecl lhs.pres = presParseErr @node @presentation


SEM Decl
  | Decl ident.path  = @lhs.path++[2]
         exp.path  = @lhs.path++[3]
  | BoardDecl board.path  = @lhs.path++[0]
  | PPPresentationDecl pPPresentation.path  = @lhs.path++[0]


SEM Ident
  | HoleIdent     lhs.pres = presHole @lhs.focusD "Ident" (IdentNode @self @lhs.path) @lhs.path
  | ParseErrIdent lhs.pres = presParseErr @node @presentation


SEM Exp
  | PlusExp exp1.pIdC = @lhs.pIdC + 1
            exp2.pIdC = @exp1.pIdC
            lhs.pIdC = @exp2.pIdC
  | TimesExp exp1.pIdC = @lhs.pIdC + 1
             exp2.pIdC = @exp1.pIdC
             lhs.pIdC = @exp2.pIdC
  | DivExp exp1.pIdC = @lhs.pIdC + 1
           exp2.pIdC = @exp1.pIdC
           lhs.pIdC = @exp2.pIdC
  | PowerExp exp1.pIdC = @lhs.pIdC + 1
             exp2.pIdC = @exp1.pIdC
             lhs.pIdC = @exp2.pIdC
  | LamExp ident.pIdC = @lhs.pIdC + 2
           exp.pIdC = @ident.pIdC
           lhs.pIdC = @exp.pIdC
  | AppExp exp1.pIdC = @lhs.pIdC + 0
           exp2.pIdC = @exp1.pIdC
           lhs.pIdC = @exp2.pIdC
  | CaseExp exp.pIdC = @lhs.pIdC + 2
            alts.pIdC = @exp.pIdC
            lhs.pIdC = @alts.pIdC
  | LetExp decls.pIdC = @lhs.pIdC + 2
           exp.pIdC = @decls.pIdC
           lhs.pIdC = @exp.pIdC
  | IdentExp ident.pIdC = @lhs.pIdC + 0
             lhs.pIdC = @ident.pIdC
  | IfExp exp1.pIdC = @lhs.pIdC + 3
          exp3.pIdC = @exp2.pIdC
          exp2.pIdC = @exp1.pIdC
          lhs.pIdC = @exp3.pIdC
  | ParenExp exp.pIdC = @lhs.pIdC + 2
             lhs.pIdC = @exp.pIdC
  | ListExp exps.pIdC = @lhs.pIdC + 3
            lhs.pIdC = @exps.pIdC
  | ProductExp exps.pIdC = @lhs.pIdC + 3
               lhs.pIdC = @exps.pIdC
  | HoleExp     lhs.pres = presHole @lhs.focusD "Exp" (ExpNode @self @lhs.path) @lhs.path
  | ParseErrExp lhs.pres = presParseErr @node @presentation


SEM Exp
  | PlusExp exp1.path  = @lhs.path++[0]
            exp2.path  = @lhs.path++[1]
  | TimesExp exp1.path  = @lhs.path++[0]
             exp2.path  = @lhs.path++[1]
  | DivExp exp1.path  = @lhs.path++[0]
           exp2.path  = @lhs.path++[1]
  | PowerExp exp1.path  = @lhs.path++[0]
             exp2.path  = @lhs.path++[1]
  | LamExp ident.path  = @lhs.path++[0]
           exp.path  = @lhs.path++[1]
  | AppExp exp1.path  = @lhs.path++[0]
           exp2.path  = @lhs.path++[1]
  | CaseExp exp.path  = @lhs.path++[0]
            alts.path  = @lhs.path++[1]
  | LetExp decls.path  = @lhs.path++[0]
           exp.path  = @lhs.path++[1]
  | IdentExp ident.path  = @lhs.path++[0]
  | IfExp exp1.path  = @lhs.path++[0]
          exp2.path  = @lhs.path++[1]
          exp3.path  = @lhs.path++[2]
  | ParenExp exp.path  = @lhs.path++[0]
  | ListExp exps.path  = @lhs.path++[0]
  | ProductExp exps.path  = @lhs.path++[0]


SEM Alt
  | Alt ident.pIdC = @lhs.pIdC + 2
        exp.pIdC = @ident.pIdC
        lhs.pIdC = @exp.pIdC
  | HoleAlt     lhs.pres = presHole @lhs.focusD "Alt" (AltNode @self @lhs.path) @lhs.path
  | ParseErrAlt lhs.pres = presParseErr @node @presentation


SEM Alt
  | Alt ident.path  = @lhs.path++[0]
        exp.path  = @lhs.path++[1]


SEM Board
  | Board r1.pIdC = @lhs.pIdC + 0
          r8.pIdC = @r7.pIdC
          r7.pIdC = @r6.pIdC
          r6.pIdC = @r5.pIdC
          r5.pIdC = @r4.pIdC
          r4.pIdC = @r3.pIdC
          r3.pIdC = @r2.pIdC
          r2.pIdC = @r1.pIdC
          lhs.pIdC = @r8.pIdC
  | HoleBoard     lhs.pres = presHole @lhs.focusD "Board" (BoardNode @self @lhs.path) @lhs.path
  | ParseErrBoard lhs.pres = presParseErr @node @presentation


SEM Board
  | Board r1.path  = @lhs.path++[0]
          r2.path  = @lhs.path++[1]
          r3.path  = @lhs.path++[2]
          r4.path  = @lhs.path++[3]
          r5.path  = @lhs.path++[4]
          r6.path  = @lhs.path++[5]
          r7.path  = @lhs.path++[6]
          r8.path  = @lhs.path++[7]


SEM BoardRow
  | BoardRow ca.pIdC = @lhs.pIdC + 0
             ch.pIdC = @cg.pIdC
             cg.pIdC = @cf.pIdC
             cf.pIdC = @ce.pIdC
             ce.pIdC = @cd.pIdC
             cd.pIdC = @cc.pIdC
             cc.pIdC = @cb.pIdC
             cb.pIdC = @ca.pIdC
             lhs.pIdC = @ch.pIdC
  | HoleBoardRow     lhs.pres = presHole @lhs.focusD "BoardRow" (BoardRowNode @self @lhs.path) @lhs.path
  | ParseErrBoardRow lhs.pres = presParseErr @node @presentation


SEM BoardRow
  | BoardRow ca.path  = @lhs.path++[0]
             cb.path  = @lhs.path++[1]
             cc.path  = @lhs.path++[2]
             cd.path  = @lhs.path++[3]
             ce.path  = @lhs.path++[4]
             cf.path  = @lhs.path++[5]
             cg.path  = @lhs.path++[6]
             ch.path  = @lhs.path++[7]


SEM BoardSquare
  | HoleBoardSquare     lhs.pres = presHole @lhs.focusD "BoardSquare" (BoardSquareNode @self @lhs.path) @lhs.path
  | ParseErrBoardSquare lhs.pres = presParseErr @node @presentation


SEM PPPresentation
  | PPPresentation slides.pIdC = @lhs.pIdC + 0
                   lhs.pIdC = @slides.pIdC
  | HolePPPresentation     lhs.pres = presHole @lhs.focusD "PPPresentation" (PPPresentationNode @self @lhs.path) @lhs.path
  | ParseErrPPPresentation lhs.pres = presParseErr @node @presentation


SEM PPPresentation
  | PPPresentation slides.path  = @lhs.path++[1]


SEM Slide
  | Slide title.pIdC = @lhs.pIdC + 0
          itemList.pIdC = @title.pIdC
          lhs.pIdC = @itemList.pIdC
  | HoleSlide     lhs.pres = presHole @lhs.focusD "Slide" (SlideNode @self @lhs.path) @lhs.path
  | ParseErrSlide lhs.pres = presParseErr @node @presentation


SEM Slide
  | Slide title.path  = @lhs.path++[0]
          itemList.path  = @lhs.path++[1]


SEM ItemList
  | ItemList listType.pIdC = @lhs.pIdC + 0
             items.pIdC = @listType.pIdC
             lhs.pIdC = @items.pIdC
  | HoleItemList     lhs.pres = presHole @lhs.focusD "ItemList" (ItemListNode @self @lhs.path) @lhs.path
  | ParseErrItemList lhs.pres = presParseErr @node @presentation


SEM ItemList
  | ItemList listType.path  = @lhs.path++[0]
             items.path  = @lhs.path++[1]


SEM ListType
  | HoleListType     lhs.pres = presHole @lhs.focusD "ListType" (ListTypeNode @self @lhs.path) @lhs.path
  | ParseErrListType lhs.pres = presParseErr @node @presentation


SEM Item
  | StringItem string.pIdC = @lhs.pIdC + 0
               lhs.pIdC = @string.pIdC
  | HeliumItem exp.pIdC = @lhs.pIdC + 0
               lhs.pIdC = @exp.pIdC
  | ListItem itemList.pIdC = @lhs.pIdC + 0
             lhs.pIdC = @itemList.pIdC
  | HoleItem     lhs.pres = presHole @lhs.focusD "Item" (ItemNode @self @lhs.path) @lhs.path
  | ParseErrItem lhs.pres = presParseErr @node @presentation


SEM Item
  | StringItem string.path  = @lhs.path++[0]
  | HeliumItem exp.path  = @lhs.path++[0]
  | ListItem itemList.path  = @lhs.path++[0]


SEM String_
  | HoleString_     lhs.pres = presHole @lhs.focusD "String_" (String_Node @self @lhs.path) @lhs.path
  | ParseErrString_ lhs.pres = presParseErr @node @presentation

SEM List_Decl
  | List_Decl
      lhs.press = map ( loc (List_DeclNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Decl     lhs.press = []
  | ParseErrList_Decl lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Decl
  | Cons_Decl head.path  = @lhs.path++[@lhs.ix]
             tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Decl      lhs.press = []


SEM ConsList_Decl [ ix : Int | | ]
  | Cons_Decl     tail.ix  = @lhs.ix + 1

SEM List_Alt
  | List_Alt
      lhs.press = map ( loc (List_AltNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Alt     lhs.press = []
  | ParseErrList_Alt lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Alt
  | Cons_Alt head.path  = @lhs.path++[@lhs.ix]
            tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Alt      lhs.press = []


SEM ConsList_Alt [ ix : Int | | ]
  | Cons_Alt     tail.ix  = @lhs.ix + 1

SEM List_Exp
  | List_Exp
      lhs.press = map ( loc (List_ExpNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Exp     lhs.press = []
  | ParseErrList_Exp lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Exp
  | Cons_Exp head.path  = @lhs.path++[@lhs.ix]
            tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Exp      lhs.press = []


SEM ConsList_Exp [ ix : Int | | ]
  | Cons_Exp     tail.ix  = @lhs.ix + 1

SEM List_Slide
  | List_Slide
      lhs.press = map ( loc (List_SlideNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Slide     lhs.press = []
  | ParseErrList_Slide lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Slide
  | Cons_Slide head.path  = @lhs.path++[@lhs.ix]
              tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Slide      lhs.press = []


SEM ConsList_Slide [ ix : Int | | ]
  | Cons_Slide     tail.ix  = @lhs.ix + 1

SEM List_Item
  | List_Item
      lhs.press = map ( loc (List_ItemNode @self @lhs.path) 
                      . presentFocus @lhs.focusD @lhs.path ) 
                      @elts.press
                      -- parent is reponsible for setting parsing/structural
      elts.pIdC = @lhs.pIdC + 100 -- NOT RIGHT, should be taken from document type def.
      lhs.pIdC = @elts.pIdC
      elts.path = @lhs.path
      elts.ix = 0
  | HoleList_Item     lhs.press = []
  | ParseErrList_Item lhs.press = [ presParseErr @node @presentation ]

SEM ConsList_Item
  | Cons_Item head.path  = @lhs.path++[@lhs.ix]
             tail.path = @lhs.path
                 lhs.press = @head.pres : @tail.press
                 head.pIdC = @lhs.pIdC + 30 -- NOT RIGHT, should be taken from document type def.
                 tail.pIdC = @head.pIdC
                 lhs.pIdC = @tail.pIdC
  | Nil_Item      lhs.press = []


SEM ConsList_Item [ ix : Int | | ]
  | Cons_Item     tail.ix  = @lhs.ix + 1


ATTR  EnrichedDoc Decl Ident Exp Alt Board BoardRow BoardSquare PPPresentation Slide ItemList ListType Item String_ List_Decl ConsList_Decl List_Alt ConsList_Alt List_Exp ConsList_Exp List_Slide ConsList_Slide List_Item ConsList_Item
       [ |  pIdC : Int  | ]


ATTR  EnrichedDoc Decl Ident Exp Alt Board BoardRow BoardSquare PPPresentation Slide ItemList ListType Item String_ List_Decl ConsList_Decl List_Alt ConsList_Alt List_Exp ConsList_Exp List_Slide ConsList_Slide List_Item ConsList_Item
       [ focusD : FocusDoc | | ]


ATTR  Decl Ident Exp Alt Board BoardRow BoardSquare PPPresentation Slide ItemList ListType Item String_ List_Decl ConsList_Decl List_Alt ConsList_Alt List_Exp ConsList_Exp List_Slide ConsList_Slide List_Item ConsList_Item
       [ path : {[Int]}  | | ]


ATTR  List_Decl ConsList_Decl List_Alt ConsList_Alt List_Exp ConsList_Exp List_Slide ConsList_Slide List_Item ConsList_Item [ | | press : {[Presentation]} ]


ATTR  EnrichedDoc Decl Ident Exp Alt Board BoardRow BoardSquare PPPresentation Slide ItemList ListType Item String_ [ | | pres : Presentation ]


ATTR  Decl Ident Exp Alt Board BoardRow BoardSquare PPPresentation Slide ItemList ListType Item String_ [ ix : Int || ]
