-- Tests parameterized nonterminals in combination with:
-- visit functions
-- case expressions
-- bang patterns
-- class context

MODULE {Main} {} {}

optpragmas
{
{-# OPTIONS_GHC -fglasgow-exts #-}
}

imports
{
import Data.Set(Set)
import qualified Data.Set as Set
}

PRAGMA strictdata
PRAGMA bangpats
PRAGMA optimize


DATA A b c
  | A
      b : (B b)
      c : (C c)

DATA B b
  | B
      x : {b}

DATA C c
  | C
      x : {c}

WRAPPER A


ATTR Ord b => B [ | | bsGath USE {`Set.union`} {Set.empty} : {Set @b} ]
ATTR Ord c => C [ | | csGath USE {`Set.union`} {Set.empty} : {Set @c} ]

SEM B
  | B
      loc.bsGath : {Set @b}
      loc.bsGath = Set.singleton @x

SEM C
  | C
      loc.csGath : {Set @c}
      loc.csGath = Set.singleton @x


ATTR B [ bs : {[@b]} | | ]
ATTR C [ cs : {[@c]} | | ]

SEM Ord {b}, Ord {c} => A
  | A
      b.bs = Set.toList @b.bsGath
      c.cs = Set.toList @c.csGath


ATTR A B C [ | | count USE {+} {0} : Int ]

SEM B
  | B
      lhs.count = length @lhs.bs

SEM C
  | C
      lhs.count = length @lhs.cs


{
valA :: A String Bool
valA
  = A_A (B_B "") (C_C False)

main :: IO ()
main
  = let inh = Inh_A {}
        sem = sem_A valA
        syn = wrap_A sem inh
    in putStrLn ("count: " ++ show (count_Syn_A syn))
}

