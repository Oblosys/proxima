-- Tests parameterized nonterminals, in combination with:
-- no visit functions
-- lets instead of cases
-- type syns
-- class context

MODULE {Main} {} {}

optpragmas
{
{-# OPTIONS_GHC -fglasgow-exts #-}
}

imports
{
import Data.Set(Set)
import qualified Data.Set as Set
}


PRAGMA strictdata
PRAGMA newtypes


DATA Root
  | Root
      exprs : (Exprs {String})

TYPE Read v => Exprs v = [Expr v]

DATA Read v => Expr v
  | Var
      nm : {v}
  | App
      f : (Expr v)
      a : (Expr v)

WRAPPER Expr
WRAPPER Root


ATTR Root [ | | ftv : {Set String} ]
ATTR Ord v => Exprs Expr [ | | ftv USE {`Set.union`} {Set.empty} : {Set @v} ]

SEM Ord v, Show v => Expr
  | Var
      loc.ftv : {Set @v}
      loc.ftv = Set.singleton @nm

SEM Show v => Exprs

{
expr :: Expr String
expr
  = Expr_App (Expr_Var "id") (Expr_Var "x")

main :: IO ()
main
  = let inh = Inh_Root {}
        sem = sem_Root (Root_Root [expr])
        syn = wrap_Root sem inh
    in putStrLn ("ftvs: " ++ show (Set.toList $ ftv_Syn_Root syn))
}

